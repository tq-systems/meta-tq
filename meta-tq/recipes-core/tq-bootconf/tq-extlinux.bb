SUMMARY = "Minimal extlinux.conf to boot TQ-Systems distributions"
LICENSE = "MIT"

inherit uboot-config deploy

# We intentionally don't set a FDT filename, so the bootloader can choose the
# correct variant based on the hardware, or the default can be overridden
# in the environment to enabled advanced features.
UBOOT_EXTLINUX_CONSOLE ??= "console=${console},${baudrate}"
UBOOT_EXTLINUX_FDT ??= ""
UBOOT_EXTLINUX_FDTDIR ??= "../"
UBOOT_EXTLINUX_KERNEL_IMAGE ??= "../${KERNEL_IMAGETYPE}"
UBOOT_EXTLINUX_KERNEL_ARGS ??= "rootwait rw"
UBOOT_EXTLINUX_KERNEL_ARGS_EXTRA ??= "${bootargs_extra}"

UBOOT_EXTLINUX_LABELS ??= "default"
UBOOT_EXTLINUX_MENU_DESCRIPTION_default ??= "${DISTRO_NAME}"

# Boot default entry after 3 seconds
UBOOT_EXTLINUX_TIMEOUT ??= "30"

# Instead of specifying a static root= argument, we expect the bootloader to pass one
# in bootargs_root.
UBOOT_EXTLINUX_ROOT ??= "${bootargs_root}"

UBOOT_EXTLINUX_CONFIG = "${B}/extlinux.conf"

def getLabelVar(d, label, name):
    value = d.getVar('UBOOT_EXTLINUX_%s_%s' % (name, label))
    if value is None:
        value = d.getVar('UBOOT_EXTLINUX_%s' % (name))

    return value

python do_create_extlinux_config() {
    labels = d.getVar('UBOOT_EXTLINUX_LABELS')
    if not labels.strip():
        bb.fatal("No labels, nothing to do")

    with open(d.getVar('UBOOT_EXTLINUX_CONFIG'), 'w') as cfgfile:
        cfgfile.write('# Generic Distro Configuration file generated by OpenEmbedded\n')

        if len(labels.split()) > 1:
            cfgfile.write('MENU TITLE Select the boot mode\n')

        timeout = d.getVar('UBOOT_EXTLINUX_TIMEOUT')
        if timeout:
            cfgfile.write('TIMEOUT %s\n' % (timeout))

        if len(labels.split()) > 1:
            default = d.getVar('UBOOT_EXTLINUX_DEFAULT_LABEL')
            if default:
                cfgfile.write('DEFAULT %s\n' % (default))

        for label in labels.split():

            cfgfile.write('LABEL %s\n' % (label))

            menu_description = getLabelVar(d, label, 'MENU_DESCRIPTION')
            if not menu_description:
                menu_description = label
            cfgfile.write('\tMENU LABEL %s\n' % (menu_description))

            kernel_image = getLabelVar(d, label, 'KERNEL_IMAGE')
            cfgfile.write('\tKERNEL %s\n' % (kernel_image))

            fdt = getLabelVar(d, label, 'FDT')
            fdtdir = getLabelVar(d, label, 'FDTDIR')
            if fdt:
                cfgfile.write('\tFDT %s\n' % (fdt))
            elif fdtdir:
                cfgfile.write('\tFDTDIR %s\n' % (fdtdir))

            initrd = getLabelVar(d, label, 'INITRD')
            if initrd:
                cfgfile.write('\tINITRD %s\n'% initrd)

            kernel_args = getLabelVar(d, label, 'KERNEL_ARGS')
            root = getLabelVar(d, label, 'ROOT')
            extlinux_console = getLabelVar(d, label, 'CONSOLE')
            kernel_args_extra = getLabelVar(d, label, 'KERNEL_ARGS_EXTRA')
            cfgfile.write('\tAPPEND %s %s %s %s\n' %
                (kernel_args, root, extlinux_console, kernel_args_extra))
}

UBOOT_EXTLINUX_VARS = "MENU_DESCRIPTION KERNEL_IMAGE FDT FDTDIR INITRD KERNEL_ARGS ROOT CONSOLE"
do_create_extlinux_config[vardeps] += "${@' '.join(['UBOOT_EXTLINUX_%s_%s' % (v, l) for v in d.getVar('UBOOT_EXTLINUX_VARS').split() for l in d.getVar('UBOOT_EXTLINUX_LABELS').split()])}"
addtask create_extlinux_config before do_install do_deploy after do_compile

do_install () {
    install -Dm 0644 ${UBOOT_EXTLINUX_CONFIG} ${D}/${UBOOT_EXTLINUX_INSTALL_DIR}/${UBOOT_EXTLINUX_CONF_NAME}
}
FILES:${PN} = "${UBOOT_EXTLINUX_INSTALL_DIR}/${UBOOT_EXTLINUX_CONF_NAME}"

do_deploy () {
    install -m 644 ${UBOOT_EXTLINUX_CONFIG} ${DEPLOYDIR}/${UBOOT_EXTLINUX_SYMLINK}
    ln -sf ${UBOOT_EXTLINUX_SYMLINK} ${DEPLOYDIR}/${UBOOT_EXTLINUX_CONF_NAME}-${MACHINE}
    ln -sf ${UBOOT_EXTLINUX_SYMLINK} ${DEPLOYDIR}/${UBOOT_EXTLINUX_CONF_NAME}
}
addtask deploy before do_build after do_compile

PACKAGE_ARCH = "${MACHINE_ARCH}"
