From 1af30e9859802f09df1911c358a8d7522aea03b1 Mon Sep 17 00:00:00 2001
From: Binh Nguyen <binh.nguyen.uw@renesas.com>
Date: Tue, 7 Apr 2020 15:21:05 +0700
Subject: [PATCH] Plat: renesas: add support for Hihope-RZG2H board

Add support Hihope-RZG2H Board : SoC RZG2/H which is similar to RcarH3N

Signed-off-by: Shinji Hirai <shinji.hirai.zn@renesas.com>
Signed-off-by: Binh Nguyen <binh.nguyen.uw@renesas.com>
---
 plat/renesas/rcar/bl2_rcar_setup.c                 |  16 +-
 plat/renesas/rcar/bl2_secure_setting.c             |  12 +-
 .../renesas/rcar/ddr/ddr_b/boot_init_dram_config.c | 194 ++++++-
 plat/renesas/rcar/drivers/board/board.c            |  13 +
 plat/renesas/rcar/drivers/board/board.h            |   3 +-
 plat/renesas/rcar/include/emmc_registers.h         |   6 +-
 plat/renesas/rcar/pfc/H3/pfc_init_h3_v2.c          | 610 +++++++++++++++++++++
 plat/renesas/rcar/platform.mk                      |  21 +
 tools/dummy_create/makefile                        |   5 +
 tools/dummy_create/sa6.c                           |   6 +-
 10 files changed, 868 insertions(+), 18 deletions(-)

diff --git a/plat/renesas/rcar/bl2_rcar_setup.c b/plat/renesas/rcar/bl2_rcar_setup.c
index 4b7a923..6c2db55 100644
--- a/plat/renesas/rcar/bl2_rcar_setup.c
+++ b/plat/renesas/rcar/bl2_rcar_setup.c
@@ -121,8 +121,13 @@
 
 /* R-Car Series, 3rd Generation product check */
 #if (RCAR_LSI == RCAR_H3) || (RCAR_LSI == RCAR_H3N)
+#if (RZG_HIHOPE_RZG2H) // RZG_HIHOPE_RZG2H
+#define TARGET_PRODUCT		RCAR_PRODUCT_H3
+#define TARGET_NAME		"RZ G2H"
+#else  // RZG_HIHOPE_RZG2H
 #define TARGET_PRODUCT		RCAR_PRODUCT_H3
 #define TARGET_NAME		"R-Car H3"
+#endif // RZG_HIHOPE_RZG2H
 #elif RCAR_LSI == RCAR_M3
 
 #if (RZG_HIHOPE_RZG2M) // RZG_HIHOPE_RZG2M
@@ -422,7 +427,11 @@ static void rcar_bl2_early_platform_setup(const meminfo_t *mem_layout)
 	const char *str;
 	const char *cpu_ca57        = "CA57";
 	const char *cpu_ca53        = "CA53";
+#if (RZG_HIHOPE_RZG2H) // RZG_HIHOPE_RZG2H
+	const char *product_h3      = "G2H";
+#else  // RZG_HIHOPE_RZG2H
 	const char *product_h3      = "H3";
+#endif // RZG_HIHOPE_RZG2H
 #if (RZG_HIHOPE_RZG2M) // RZG_HIHOPE_RZG2M
 	const char *product_m3      = "G2M";
 #else  // RZG_HIHOPE_RZG2M
@@ -552,15 +561,15 @@ static void rcar_bl2_early_platform_setup(const meminfo_t *mem_layout)
 #endif // RZG_HIHOPE_RZG2M
 		}
 	} else {
-#if (RZG_EK874 | RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M) //RZG_EK874 | RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M
+#if (RZG_EK874 | RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M | RZG_HIHOPE_RZG2H) //RZG_EK874 | RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M | RZG_HIHOPE_RZG2H
 		(void)sprintf(msg, "BL2: PRR is RZG %s Ver.%d.%d\n", str,
 			((prr_val & RCAR_MAJOR_MASK) >> RCAR_MAJOR_SHIFT)
 			 + RCAR_MAJOR_OFFSET, (prr_val & RCAR_MINOR_MASK));
-#else //RZG_EK874 | RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M
+#else //RZG_EK874 | RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M | RZG_HIHOPE_RZG2H
 		(void)sprintf(msg, "BL2: PRR is R-Car %s Ver.%d.%d\n", str,
 			((prr_val & RCAR_MAJOR_MASK) >> RCAR_MAJOR_SHIFT)
 			 + RCAR_MAJOR_OFFSET, (prr_val & RCAR_MINOR_MASK));
-#endif //RZG_EK874 | RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M
+#endif //RZG_EK874 | RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M | RZG_HIHOPE_RZG2H
 	}
 	NOTICE("%s", msg);
 
@@ -591,6 +600,7 @@ static void rcar_bl2_early_platform_setup(const meminfo_t *mem_layout)
 	case BOARD_EK874:
 	case BOARD_HIHOPE_RZG2N:
 	case BOARD_HIHOPE_RZG2M:
+	case BOARD_HIHOPE_RZG2H:
 		/* Do nothing. */
 		break;
 	default:
diff --git a/plat/renesas/rcar/bl2_secure_setting.c b/plat/renesas/rcar/bl2_secure_setting.c
index f3a3725..6eb63d5 100644
--- a/plat/renesas/rcar/bl2_secure_setting.c
+++ b/plat/renesas/rcar/bl2_secure_setting.c
@@ -91,12 +91,12 @@ static const struct {
 	/** Security attribute setting for slave ports 13 */
 	/* Bit22: RPC slave ports. */
 	/*        0: registers can be accessed from secure resource only. */
-#if (RZG_EK874) | (RZG_HIHOPE_RZG2N) | (RZG_HIHOPE_RZG2M)
+#if (RZG_EK874) | (RZG_HIHOPE_RZG2N) | (RZG_HIHOPE_RZG2M) | (RZG_HIHOPE_RZG2H)
 	/* Permit RPC access from non-secure resource */
 	{SEC_SEL13,		0xFFFFFFFFU},
-#else	// RZG_EK874 | RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M
+#else	// RZG_EK874 | RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M | RZG_HIHOPE_RZG2H
 	{SEC_SEL13,		0xFFBFFFFFU},
-#endif	// RZG_EK874 | RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M
+#endif	// RZG_EK874 | RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M | RZG_HIHOPE_RZG2H
 
 	/** Security attribute setting for slave ports 14 */
 	/* Bit27: System Timer (SCMT) slave ports. */
@@ -227,14 +227,14 @@ static const struct {
 	/** Security group 1 attribute setting for slave ports 13 */
 	/* Bit22: RPC slave ports. */
 	/*        SecurityGroup3 */
-#if (RZG_EK874) | (RZG_HIHOPE_RZG2N) | (RZG_HIHOPE_RZG2M)
+#if (RZG_EK874) | (RZG_HIHOPE_RZG2N) | (RZG_HIHOPE_RZG2M) | (RZG_HIHOPE_RZG2H)
 	/* Permit RPC access from non-secure resource */
 	{SEC_GRP0COND13,	0x00000000U},
 	{SEC_GRP1COND13,	0x00000000U},
-#else	// RZG_EK874 | RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M
+#else	// RZG_EK874 | RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M | RZG_HIHOPE_RZG2H
 	{SEC_GRP0COND13,	0x00400000U},
 	{SEC_GRP1COND13,	0x00400000U},
-#endif	// RZG_EK874 | RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M
+#endif	// RZG_EK874 | RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M | RZG_HIHOPE_RZG2H
 
 	/** Security group 0 attribute setting for slave ports 14 */
 	/** Security group 1 attribute setting for slave ports 14 */
diff --git a/plat/renesas/rcar/ddr/ddr_b/boot_init_dram_config.c b/plat/renesas/rcar/ddr/ddr_b/boot_init_dram_config.c
index 8fb7687..7f9018a 100644
--- a/plat/renesas/rcar/ddr/ddr_b/boot_init_dram_config.c
+++ b/plat/renesas/rcar/ddr/ddr_b/boot_init_dram_config.c
@@ -11,7 +11,7 @@
  *	NUMBER OF BOARD CONFIGRATION
  *	PLEASE DEFINE
  ******************************************************************************/
-#define BOARDNUM 25
+#define BOARDNUM 27
 /*******************************************************************************
  *	PLEASE SET board number or board judge function
  ******************************************************************************/
@@ -45,6 +45,10 @@ static uint32_t boardcnf_get_brd_type(void){
 static uint32_t boardcnf_get_brd_type(void){
 	return (24);
 }
+#elif (RZG_HIHOPE_RZG2H) // RZG_HIHOPE_RZG2H
+static uint32_t boardcnf_get_brd_type(void){
+	return (26);
+}
 #else
 #define BOARD_JUDGE_AUTO
 #ifdef BOARD_JUDGE_AUTO
@@ -1788,7 +1792,193 @@ static const struct _boardcnf boardcnfs[BOARDNUM] = {
 			  0, 0, 0, 0, 0, 0, 0, 0 }
 		}
 	}
-}
+},
+/*
+ * boardcnf[25] Jiangsu HopeRun Software Co., Ltd. HiHope RZ/G2H board 8Gbit/2rank/2ch board with G2H/SOC
+ */
+{
+	0x05,		/* phyvalid */
+	0x01,		/* dbi_en */
+	0x0300,		/* cacs_dly */
+	0,		/* cacs_dly_adj */
+	0x0300,		/* dqdm_dly_w */
+	0x00a0,		/* dqdm_dly_r */
+	{
+/*ch[0]*/	{
+/*ddr_density[]*/	{ 0x02, 0x02 },
+/*ca_swap*/		0x00345201,
+/*dqs_swap*/		0x3201,
+/*dq_swap[]*/		{ 0x01672543, 0x45367012, 0x45632107, 0x60715234 },
+/*dm_swap[]*/		{ 0x08, 0x08, 0x08, 0x08 },
+/*wdqlvl_patt[]*/	WDQLVL_PAT,
+/*cacs_adj*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0 },
+/*dm_adj_w*/		{ 0, 0, 0, 0 },
+/*dqdm_adj_w*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0 },
+/*dm_adj_r*/		{ 0, 0, 0, 0 },
+/*dqdm_adj_r*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0 }
+		},
+/*ch[1]*/	{	// for DRAM_SPLIT_2CH
+/*ddr_density[]*/	{ 0x02, 0x02 },
+/*ca_swap*/		0x00302154,
+/*dqs_swap*/		0x2310,
+/*dq_swap[]*/		{ 0x01672543, 0x45361207, 0x45632107, 0x60715234 },
+/*dm_swap[]*/		{ 0x08, 0x08, 0x08, 0x08 },
+/*wdqlvl_patt[]*/	WDQLVL_PAT,
+/*cacs_adj*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0 },
+/*dm_adj_w*/		{ 0, 0, 0, 0 },
+/*dqdm_adj_w*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0 },
+/*dm_adj_r*/		{ 0, 0, 0, 0 },
+/*dqdm_adj_r*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0 }
+		},
+/*ch[2]*/	{	// for DRAM_SPLIT_NON
+/*ddr_density[]*/	{ 0x02, 0x02 },
+/*ca_swap*/		0x00302154,
+/*dqs_swap*/		0x2310,
+/*dq_swap[]*/		{ 0x01672543, 0x45361207, 0x45632107, 0x60715234 },
+/*dm_swap[]*/		{ 0x08, 0x08, 0x08, 0x08 },
+/*wdqlvl_patt[]*/	WDQLVL_PAT,
+/*cacs_adj*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0 },
+/*dm_adj_w*/		{ 0, 0, 0, 0 },
+/*dqdm_adj_w*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0 },
+/*dm_adj_r*/		{ 0, 0, 0, 0 },
+/*dqdm_adj_r*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0 }
+		},
+/*ch[3]*/	{ // Dummy
+/*ddr_density[]*/	{ 0xff, 0xff },
+/*ca_swap*/		0,
+/*dqs_swap*/		0,
+/*dq_swap[]*/		{ 0, 0, 0, 0 },
+/*dm_swap[]*/		{ 0, 0, 0, 0 },
+/*wdqlvl_patt[]*/	WDQLVL_PAT,
+/*cacs_adj*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0 },
+/*dm_adj_w*/		{ 0, 0, 0, 0 },
+/*dqdm_adj_w*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0 },
+/*dm_adj_r*/		{ 0, 0, 0, 0 },
+/*dqdm_adj_r*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0 }
+		}
+	}
+},
+/*
+ * boardcnf[26] Jiangsu HopeRun Software Co., Ltd. HiHope RZ/G2H board 16Gbit/1rank/2ch board with G2H/SOC
+ */
+{
+	0x05,		/* phyvalid */
+	0x01,		/* dbi_en */
+	0x0300,		/* cacs_dly */
+	0,		/* cacs_dly_adj */
+	0x0300,		/* dqdm_dly_w */
+	0x00a0,		/* dqdm_dly_r */
+	{
+/*ch[0]*/	{
+/*ddr_density[]*/	{ 0x04, 0xff },
+/*ca_swap*/		0x00345201,
+/*dqs_swap*/		0x3201,
+/*dq_swap[]*/		{ 0x01672543, 0x45367012, 0x45632107, 0x60715234 },
+/*dm_swap[]*/		{ 0x08, 0x08, 0x08, 0x08 },
+/*wdqlvl_patt[]*/	WDQLVL_PAT,
+/*cacs_adj*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0 },
+/*dm_adj_w*/		{ 0, 0, 0, 0 },
+/*dqdm_adj_w*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0 },
+/*dm_adj_r*/		{ 0, 0, 0, 0 },
+/*dqdm_adj_r*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0 }
+		},
+/*ch[1]*/	{	// for DRAM_SPLIT_2CH
+/*ddr_density[]*/	{ 0x04, 0xff },
+/*ca_swap*/		0x00302154,
+/*dqs_swap*/		0x2310,
+/*dq_swap[]*/		{ 0x01672543, 0x45361207, 0x45632107, 0x60715234 },
+/*dm_swap[]*/		{ 0x08, 0x08, 0x08, 0x08 },
+/*wdqlvl_patt[]*/	WDQLVL_PAT,
+/*cacs_adj*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0 },
+/*dm_adj_w*/		{ 0, 0, 0, 0 },
+/*dqdm_adj_w*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0 },
+/*dm_adj_r*/		{ 0, 0, 0, 0 },
+/*dqdm_adj_r*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0 }
+		},
+/*ch[2]*/	{	// for DRAM_SPLIT_NON
+/*ddr_density[]*/	{ 0x04, 0xff },
+/*ca_swap*/		0x00302154,
+/*dqs_swap*/		0x2310,
+/*dq_swap[]*/		{ 0x01672543, 0x45361207, 0x45632107, 0x60715234 },
+/*dm_swap[]*/		{ 0x08, 0x08, 0x08, 0x08 },
+/*wdqlvl_patt[]*/	WDQLVL_PAT,
+/*cacs_adj*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0 },
+/*dm_adj_w*/		{ 0, 0, 0, 0 },
+/*dqdm_adj_w*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0 },
+/*dm_adj_r*/		{ 0, 0, 0, 0 },
+/*dqdm_adj_r*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0 }
+		},
+/*ch[3]*/	{ // Dummy
+/*ddr_density[]*/	{ 0xff, 0xff },
+/*ca_swap*/		0,
+/*dqs_swap*/		0,
+/*dq_swap[]*/		{ 0, 0, 0, 0 },
+/*dm_swap[]*/		{ 0, 0, 0, 0 },
+/*wdqlvl_patt[]*/	WDQLVL_PAT,
+/*cacs_adj*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0 },
+/*dm_adj_w*/		{ 0, 0, 0, 0 },
+/*dqdm_adj_w*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0 },
+/*dm_adj_r*/		{ 0, 0, 0, 0 },
+/*dqdm_adj_r*/		{ 0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0,
+			  0, 0, 0, 0, 0, 0, 0, 0 }
+		}
+	}
+},
 };
 
 /*******************************************************************************
diff --git a/plat/renesas/rcar/drivers/board/board.c b/plat/renesas/rcar/drivers/board/board.c
index e0c3708..37b9b63 100644
--- a/plat/renesas/rcar/drivers/board/board.c
+++ b/plat/renesas/rcar/drivers/board/board.c
@@ -26,6 +26,8 @@
 #define BOARD_DEFAULT		(BOARD_HIHOPE_RZG2M << BOARD_CODE_SHIFT)
 #elif (RZG_HIHOPE_RZG2N) // RZG_HIHOPE_RZG2N
 #define BOARD_DEFAULT		(BOARD_HIHOPE_RZG2N << BOARD_CODE_SHIFT)
+#elif (RZG_HIHOPE_RZG2H) // RZG_HIHOPE_RZG2H
+#define BOARD_DEFAULT		(BOARD_HIHOPE_RZG2H << BOARD_CODE_SHIFT)
 #else
 #define BOARD_DEFAULT		(BOARD_SALVATOR_X << BOARD_CODE_SHIFT)
 #endif
@@ -60,6 +62,7 @@ const char *g_board_tbl[] = {
 	[BOARD_EK874]		= "EK874 RZ/G2E",
 	[BOARD_HIHOPE_RZG2M]	= "HiHope RZ/G2M",
 	[BOARD_HIHOPE_RZG2N]	= "HiHope RZ/G2N",
+	[BOARD_HIHOPE_RZG2H]	= "HiHope RZ/G2H",
 	[BOARD_UNKNOWN]		= "unknown"
 };
 
@@ -67,7 +70,12 @@ const char *g_board_tbl[] = {
 int32_t get_board_type(uint32_t *type, uint32_t *rev)
 {
 	int32_t ret = 0;
+#if	RZG_HIHOPE_RZG2H
+	uint32_t boardInfo;
+#else	/* RZG_HIHOPE_RZG2H	*/
 	uint8_t read_rev;
+#endif	/* RZG_HIHOPE_RZG2H	*/
+
 #if	(RZG_HIHOPE_RZG2N) | (RZG_HIHOPE_RZG2M)
 	uint32_t reg, boardInfo;
 #endif	/* RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M */
@@ -94,6 +102,8 @@ int32_t get_board_type(uint32_t *type, uint32_t *rev)
 					   0xFFU, 0xFFU, 0xFFU, 0xFFU},
 		[BOARD_HIHOPE_RZG2N]	= {0x20U, 0xFFU, 0xFFU, 0xFFU,
 					   0xFFU, 0xFFU, 0xFFU, 0xFFU},
+		[BOARD_HIHOPE_RZG2H]	= {0x10U, 0xFFU, 0xFFU, 0xFFU,
+					   0xFFU, 0xFFU, 0xFFU, 0xFFU},
 	};
 
 	if (BOARD_ID_UNKNOWN == g_board_id) {
@@ -140,6 +150,9 @@ int32_t get_board_type(uint32_t *type, uint32_t *rev)
 			boardInfo = reg & (GP5_19_BIT |GP5_21_BIT);
 			*rev = (((boardInfo & GP5_19_BIT) >> 14) | ((boardInfo & GP5_21_BIT) >> 17)) + 0x30;
 		}
+#elif (RZG_HIHOPE_RZG2H)
+		boardInfo = mmio_read_32(GPIO_INDT5) & (GP5_19_BIT |GP5_21_BIT);
+		*rev = (((boardInfo & GP5_19_BIT) >> 14) | ((boardInfo & GP5_21_BIT) >> 17)) + 0x30;
 #else
 		read_rev = (uint8_t)(g_board_id & BOARD_REV_MASK);
 		*rev = board_tbl[*type][read_rev];
diff --git a/plat/renesas/rcar/drivers/board/board.h b/plat/renesas/rcar/drivers/board/board.h
index 1d6f8ab..00bcdd2 100644
--- a/plat/renesas/rcar/drivers/board/board.h
+++ b/plat/renesas/rcar/drivers/board/board.h
@@ -21,8 +21,9 @@
 #define BOARD_EK874			(0x0EU)
 #define BOARD_HIHOPE_RZG2M		(0x0FU)
 #define BOARD_HIHOPE_RZG2N		(0x10U)
+#define BOARD_HIHOPE_RZG2H		(0x11U)
 
-#define BOARD_UNKNOWN			(BOARD_HIHOPE_RZG2N+1U)
+#define BOARD_UNKNOWN			(BOARD_HIHOPE_RZG2H+1U)
 
 #define BOARD_REV_UNKNOWN		(0xFFU)
 
diff --git a/plat/renesas/rcar/include/emmc_registers.h b/plat/renesas/rcar/include/emmc_registers.h
index 34c36a9..c0e8230 100644
--- a/plat/renesas/rcar/include/emmc_registers.h
+++ b/plat/renesas/rcar/include/emmc_registers.h
@@ -24,11 +24,11 @@
 #if RCAR_LSI == RCAR_E3
 #define USE_MMC_CH	(MMC_CH1)	/* R-Car E3 */
 #else  /* RCAR_LSI == RCAR_E3 */
-#if (RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M)
+#if (RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M | RZG_HIHOPE_RZG2H)
 #define USE_MMC_CH	(MMC_CH1)
-#else	/* RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M */
+#else	/* RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M | RZG_HIHOPE_RZG2H  */
 #define USE_MMC_CH	(MMC_CH0)	/* R-Car H3/M3/M3N */
-#endif	/* RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M */
+#endif	/* RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M | RZG_HIHOPE_RZG2H */
 #endif /* RCAR_LSI == RCAR_E3 */
 
 
diff --git a/plat/renesas/rcar/pfc/H3/pfc_init_h3_v2.c b/plat/renesas/rcar/pfc/H3/pfc_init_h3_v2.c
index 0d5b7b7..91137de 100644
--- a/plat/renesas/rcar/pfc/H3/pfc_init_h3_v2.c
+++ b/plat/renesas/rcar/pfc/H3/pfc_init_h3_v2.c
@@ -813,6 +813,62 @@ void pfc_init_h3_v2(void)
 	uint32_t reg;
 
 	/* initialize module select */
+#if RZG_HIHOPE_RZG2H
+	pfc_reg_write(PFC_MOD_SEL0, MOD_SEL0_MSIOF3_A
+				  | MOD_SEL0_MSIOF2_A
+				  | MOD_SEL0_MSIOF1_A
+				  | MOD_SEL0_LBSC_A
+				  | MOD_SEL0_IEBUS_A
+				  | MOD_SEL0_I2C2_A
+				  | MOD_SEL0_I2C1_A
+				  | MOD_SEL0_HSCIF4_A
+				  | MOD_SEL0_HSCIF3_A
+				  | MOD_SEL0_HSCIF1_A
+				  | MOD_SEL0_FSO_A
+				  | MOD_SEL0_HSCIF2_A
+				  | MOD_SEL0_ETHERAVB_A
+				  | MOD_SEL0_DRIF3_A
+				  | MOD_SEL0_DRIF2_A
+				  | MOD_SEL0_DRIF1_A
+				  | MOD_SEL0_DRIF0_A
+				  | MOD_SEL0_CANFD0_A
+				  | MOD_SEL0_ADG_A_A);
+	pfc_reg_write(PFC_MOD_SEL1, MOD_SEL1_TSIF1_A
+				  | MOD_SEL1_TSIF0_A
+				  | MOD_SEL1_TIMER_TMU_A
+				  | MOD_SEL1_SSP1_1_A
+				  | MOD_SEL1_SSP1_0_A
+				  | MOD_SEL1_SSI_A
+				  | MOD_SEL1_SPEED_PULSE_IF_A
+				  | MOD_SEL1_SIMCARD_A
+				  | MOD_SEL1_SDHI2_A
+				  | MOD_SEL1_SCIF4_A
+				  | MOD_SEL1_SCIF3_A
+				  | MOD_SEL1_SCIF2_A
+				  | MOD_SEL1_SCIF1_A
+				  | MOD_SEL1_SCIF_A
+				  | MOD_SEL1_REMOCON_A
+				  | MOD_SEL1_RCAN0_A
+				  | MOD_SEL1_PWM6_A
+				  | MOD_SEL1_PWM5_A
+				  | MOD_SEL1_PWM4_A
+				  | MOD_SEL1_PWM3_A
+				  | MOD_SEL1_PWM2_A
+				  | MOD_SEL1_PWM1_A);
+	pfc_reg_write(PFC_MOD_SEL2, MOD_SEL2_I2C_5_B
+				  | MOD_SEL2_I2C_3_B
+				  | MOD_SEL2_I2C_0_B
+				  | MOD_SEL2_FM_A
+				  | MOD_SEL2_SCIF5_A
+				  | MOD_SEL2_I2C6_A
+				  | MOD_SEL2_NDF_A
+				  | MOD_SEL2_SSI2_A
+				  | MOD_SEL2_SSI9_A
+				  | MOD_SEL2_TIMER_TMU2_A
+				  | MOD_SEL2_ADG_B_A
+				  | MOD_SEL2_ADG_C_A
+				  | MOD_SEL2_VIN4_A);
+#else  // RZG_HIHOPE_RZG2H
 	pfc_reg_write(PFC_MOD_SEL0, MOD_SEL0_MSIOF3_A
 				  | MOD_SEL0_MSIOF2_A
 				  | MOD_SEL0_MSIOF1_A
@@ -867,8 +923,157 @@ void pfc_init_h3_v2(void)
 				  | MOD_SEL2_ADG_B_A
 				  | MOD_SEL2_ADG_C_A
 				  | MOD_SEL2_VIN4_A);
+#endif // RZG_HIHOPE_RZG2H
 
 	/* initialize peripheral function select */
+#if RZG_HIHOPE_RZG2H
+	pfc_reg_write(PFC_IPSR0, IPSR_28_FUNC(0)
+			       | IPSR_24_FUNC(0)
+			       | IPSR_20_FUNC(0)
+			       | IPSR_16_FUNC(0)
+			       | IPSR_12_FUNC(0)
+			       | IPSR_8_FUNC(0)
+			       | IPSR_4_FUNC(0)
+			       | IPSR_0_FUNC(0));
+	pfc_reg_write(PFC_IPSR1, IPSR_28_FUNC(6)
+			       | IPSR_24_FUNC(0)
+			       | IPSR_20_FUNC(0)
+			       | IPSR_16_FUNC(0)
+			       | IPSR_12_FUNC(3)
+			       | IPSR_8_FUNC(3)
+			       | IPSR_4_FUNC(3)
+			       | IPSR_0_FUNC(3));
+	pfc_reg_write(PFC_IPSR2, IPSR_28_FUNC(0)
+			       | IPSR_24_FUNC(6)
+			       | IPSR_20_FUNC(6)
+			       | IPSR_16_FUNC(6)
+			       | IPSR_12_FUNC(6)
+			       | IPSR_8_FUNC(6)
+			       | IPSR_4_FUNC(6)
+			       | IPSR_0_FUNC(6));
+	pfc_reg_write(PFC_IPSR3, IPSR_28_FUNC(6)
+			       | IPSR_24_FUNC(6)
+			       | IPSR_20_FUNC(6)
+			       | IPSR_16_FUNC(6)
+			       | IPSR_12_FUNC(6)
+			       | IPSR_8_FUNC(0)
+			       | IPSR_4_FUNC(0)
+			       | IPSR_0_FUNC(0));
+	pfc_reg_write(PFC_IPSR4, IPSR_28_FUNC(0)
+			       | IPSR_24_FUNC(0)
+			       | IPSR_20_FUNC(0)
+			       | IPSR_16_FUNC(0)
+			       | IPSR_12_FUNC(0)
+			       | IPSR_8_FUNC(6)
+			       | IPSR_4_FUNC(6)
+			       | IPSR_0_FUNC(6));
+	pfc_reg_write(PFC_IPSR5, IPSR_28_FUNC(0)
+			       | IPSR_24_FUNC(0)
+			       | IPSR_20_FUNC(0)
+			       | IPSR_16_FUNC(0)
+			       | IPSR_12_FUNC(0)
+			       | IPSR_8_FUNC(6)
+			       | IPSR_4_FUNC(0)
+			       | IPSR_0_FUNC(0));
+	pfc_reg_write(PFC_IPSR6, IPSR_28_FUNC(6)
+			       | IPSR_24_FUNC(6)
+			       | IPSR_20_FUNC(6)
+			       | IPSR_16_FUNC(6)
+			       | IPSR_12_FUNC(6)
+			       | IPSR_8_FUNC(0)
+			       | IPSR_4_FUNC(0)
+			       | IPSR_0_FUNC(0));
+	pfc_reg_write(PFC_IPSR7, IPSR_28_FUNC(0)
+			       | IPSR_24_FUNC(0)
+			       | IPSR_20_FUNC(0)
+			       | IPSR_16_FUNC(0)
+			       | IPSR_12_FUNC(0)
+			       | IPSR_8_FUNC(6)
+			       | IPSR_4_FUNC(6)
+			       | IPSR_0_FUNC(6));
+	pfc_reg_write(PFC_IPSR8, IPSR_28_FUNC(1)
+			       | IPSR_24_FUNC(1)
+			       | IPSR_20_FUNC(1)
+			       | IPSR_16_FUNC(1)
+			       | IPSR_12_FUNC(0)
+			       | IPSR_8_FUNC(0)
+			       | IPSR_4_FUNC(0)
+			       | IPSR_0_FUNC(0));
+	pfc_reg_write(PFC_IPSR9, IPSR_28_FUNC(0)
+			       | IPSR_24_FUNC(0)
+			       | IPSR_20_FUNC(0)
+			       | IPSR_16_FUNC(0)
+			       | IPSR_12_FUNC(0)
+			       | IPSR_8_FUNC(0)
+			       | IPSR_4_FUNC(0)
+			       | IPSR_0_FUNC(0));
+	pfc_reg_write(PFC_IPSR10, IPSR_28_FUNC(0)
+				| IPSR_24_FUNC(0)
+				| IPSR_20_FUNC(0)
+				| IPSR_16_FUNC(0)
+				| IPSR_12_FUNC(0)
+				| IPSR_8_FUNC(0)
+				| IPSR_4_FUNC(0)
+				| IPSR_0_FUNC(0));
+	pfc_reg_write(PFC_IPSR11, IPSR_28_FUNC(0)
+				| IPSR_24_FUNC(4)
+				| IPSR_20_FUNC(0)
+				| IPSR_16_FUNC(0)
+				| IPSR_12_FUNC(0)
+				| IPSR_8_FUNC(0)
+				| IPSR_4_FUNC(0)
+				| IPSR_0_FUNC(0));
+	pfc_reg_write(PFC_IPSR12, IPSR_28_FUNC(0)
+				| IPSR_24_FUNC(0)
+				| IPSR_20_FUNC(0)
+				| IPSR_16_FUNC(0)
+				| IPSR_12_FUNC(0)
+				| IPSR_8_FUNC(4)
+				| IPSR_4_FUNC(0)
+				| IPSR_0_FUNC(0));
+	pfc_reg_write(PFC_IPSR13, IPSR_28_FUNC(8)
+				| IPSR_24_FUNC(0)
+				| IPSR_20_FUNC(0)
+				| IPSR_16_FUNC(0)
+				| IPSR_12_FUNC(0)
+				| IPSR_8_FUNC(3)
+				| IPSR_4_FUNC(0)
+				| IPSR_0_FUNC(0));
+	pfc_reg_write(PFC_IPSR14, IPSR_28_FUNC(0)
+				| IPSR_24_FUNC(0)
+				| IPSR_20_FUNC(0)
+				| IPSR_16_FUNC(0)
+				| IPSR_12_FUNC(0)
+				| IPSR_8_FUNC(0)
+				| IPSR_4_FUNC(3)
+				| IPSR_0_FUNC(8));
+	pfc_reg_write(PFC_IPSR15, IPSR_28_FUNC(0)
+				| IPSR_24_FUNC(0)
+				| IPSR_20_FUNC(0)
+				| IPSR_16_FUNC(0)
+				| IPSR_12_FUNC(0)
+				| IPSR_8_FUNC(0)
+				| IPSR_4_FUNC(0)
+				| IPSR_0_FUNC(0));
+	pfc_reg_write(PFC_IPSR16, IPSR_28_FUNC(0)
+				| IPSR_24_FUNC(0)
+				| IPSR_20_FUNC(0)
+				| IPSR_16_FUNC(0)
+				| IPSR_12_FUNC(0)
+				| IPSR_8_FUNC(0)
+				| IPSR_4_FUNC(0)
+				| IPSR_0_FUNC(0));
+	pfc_reg_write(PFC_IPSR17, IPSR_28_FUNC(0)
+				| IPSR_24_FUNC(0)
+				| IPSR_20_FUNC(0)
+				| IPSR_16_FUNC(0)
+				| IPSR_12_FUNC(0)
+				| IPSR_8_FUNC(0)
+				| IPSR_4_FUNC(1)
+				| IPSR_0_FUNC(0));
+	pfc_reg_write(PFC_IPSR18, IPSR_4_FUNC(0)
+				| IPSR_0_FUNC(0));
+#else  // RZG_HIHOPE_RZG2H
 	pfc_reg_write(PFC_IPSR0, IPSR_28_FUNC(0)
 			       | IPSR_24_FUNC(0)
 			       | IPSR_20_FUNC(0)
@@ -1014,8 +1219,113 @@ void pfc_init_h3_v2(void)
 				| IPSR_0_FUNC(0));
 	pfc_reg_write(PFC_IPSR18, IPSR_4_FUNC(0)
 				| IPSR_0_FUNC(0));
+#endif // RZG_HIHOPE_RZG2H
 
 	/* initialize GPIO/perihperal function select */
+#if RZG_HIHOPE_RZG2H
+	pfc_reg_write(PFC_GPSR0, GPSR0_D15
+			       | GPSR0_D14
+			       | GPSR0_D13
+			       | GPSR0_D12
+			       | GPSR0_D11
+			       | GPSR0_D10
+			       | GPSR0_D9
+			       | GPSR0_D8
+			       | GPSR0_D7
+			       | GPSR0_D6
+			       | GPSR0_D5
+			       | GPSR0_D4
+			       | GPSR0_D3
+			       | GPSR0_D2
+			       | GPSR0_D0);
+	pfc_reg_write(PFC_GPSR1, GPSR1_CLKOUT
+			       | GPSR1_EX_WAIT0_A
+			       | GPSR1_WE1
+			       | GPSR1_RD
+			       | GPSR1_RD_WR
+			       | GPSR1_CS0
+			       | GPSR1_A19
+			       | GPSR1_A18
+			       | GPSR1_A17
+			       | GPSR1_A16
+			       | GPSR1_A15
+			       | GPSR1_A14
+			       | GPSR1_A13
+			       | GPSR1_A12
+			       | GPSR1_A7
+			       | GPSR1_A6
+			       | GPSR1_A5
+			       | GPSR1_A4
+			       | GPSR1_A3
+			       | GPSR1_A2
+			       | GPSR1_A1
+			       | GPSR1_A0);
+	pfc_reg_write(PFC_GPSR2, GPSR2_AVB_AVTP_CAPTURE_A
+			       | GPSR2_AVB_AVTP_MATCH_A
+			       | GPSR2_AVB_LINK
+			       | GPSR2_AVB_PHY_INT
+			       | GPSR2_AVB_MDC
+			       | GPSR2_PWM2_A
+			       | GPSR2_PWM1_A
+			       | GPSR2_IRQ4
+			       | GPSR2_IRQ3
+			       | GPSR2_IRQ2
+			       | GPSR2_IRQ1
+			       | GPSR2_IRQ0);
+	pfc_reg_write(PFC_GPSR3, GPSR3_SD0_CD
+			       | GPSR3_SD1_DAT3
+			       | GPSR3_SD1_DAT2
+			       | GPSR3_SD1_DAT1
+			       | GPSR3_SD1_DAT0
+			       | GPSR3_SD0_DAT3
+			       | GPSR3_SD0_DAT2
+			       | GPSR3_SD0_DAT1
+			       | GPSR3_SD0_DAT0
+			       | GPSR3_SD0_CMD
+			       | GPSR3_SD0_CLK);
+	pfc_reg_write(PFC_GPSR4, GPSR4_SD3_DS
+			       | GPSR4_SD3_DAT7
+			       | GPSR4_SD3_DAT6
+			       | GPSR4_SD3_DAT5
+			       | GPSR4_SD3_DAT4
+			       | GPSR4_SD3_DAT3
+			       | GPSR4_SD3_DAT2
+			       | GPSR4_SD3_DAT1
+			       | GPSR4_SD3_DAT0
+			       | GPSR4_SD3_CMD
+			       | GPSR4_SD3_CLK
+			       | GPSR4_SD2_DAT3
+			       | GPSR4_SD2_DAT2
+			       | GPSR4_SD2_DAT1
+			       | GPSR4_SD2_DAT0
+			       | GPSR4_SD2_CMD
+			       | GPSR4_SD2_CLK);
+	pfc_reg_write(PFC_GPSR5, GPSR5_MSIOF0_RXD
+			       | GPSR5_MSIOF0_TXD
+			       | GPSR5_MSIOF0_SYNC
+			       | GPSR5_MSIOF0_SCK
+			       | GPSR5_RX2_A
+			       | GPSR5_TX2_A
+			       | GPSR5_RTS1
+			       | GPSR5_CTS1
+			       | GPSR5_TX1_A
+			       | GPSR5_RX1_A
+			       | GPSR5_RTS0
+			       | GPSR5_SCK0);
+	pfc_reg_write(PFC_GPSR6, GPSR6_AUDIO_CLKB_B
+			       | GPSR6_AUDIO_CLKA_A
+			       | GPSR6_SSI_WS6
+			       | GPSR6_SSI_SCK6
+			       | GPSR6_SSI_SDATA4
+			       | GPSR6_SSI_WS4
+			       | GPSR6_SSI_SCK4
+			       | GPSR6_SSI_SDATA1_A
+			       | GPSR6_SSI_SDATA0
+			       | GPSR6_SSI_WS0129
+			       | GPSR6_SSI_SCK0129);
+	pfc_reg_write(PFC_GPSR7, GPSR7_AVS2
+			       | GPSR7_AVS1);
+#else  // RZG_HIHOPE_RZG2H
 	pfc_reg_write(PFC_GPSR0, GPSR0_D15
 			       | GPSR0_D14
 			       | GPSR0_D13
@@ -1122,8 +1432,17 @@ void pfc_init_h3_v2(void)
 			       | GPSR6_SSI_SCK0129);
 	pfc_reg_write(PFC_GPSR7, GPSR7_AVS2
 			       | GPSR7_AVS1);
+#endif // RZG_HIHOPE_RZG2H
 
 	/* initialize POC control register */
+#if RZG_HIHOPE_RZG2H
+	pfc_reg_write(PFC_POCCTRL0, POC_SD0_DAT3_33V
+				  | POC_SD0_DAT2_33V
+				  | POC_SD0_DAT1_33V
+				  | POC_SD0_DAT0_33V
+				  | POC_SD0_CMD_33V
+				  | POC_SD0_CLK_33V);
+#else  // RZG_HIHOPE_RZG2H
 	pfc_reg_write(PFC_POCCTRL0, POC_SD3_DS_33V
 				  | POC_SD3_DAT7_33V
 				  | POC_SD3_DAT6_33V
@@ -1141,8 +1460,256 @@ void pfc_init_h3_v2(void)
 				  | POC_SD0_DAT0_33V
 				  | POC_SD0_CMD_33V
 				  | POC_SD0_CLK_33V);
+#endif // RZG_HIHOPE_RZG2H
 
 	/* initialize DRV control register */
+#if RZG_HIHOPE_RZG2H
+	reg = mmio_read_32(PFC_DRVCTRL0);
+	reg = ((reg & DRVCTRL0_MASK) | DRVCTRL0_QSPI0_SPCLK(3)
+				     | DRVCTRL0_QSPI0_MOSI_IO0(3)
+				     | DRVCTRL0_QSPI0_MISO_IO1(3)
+				     | DRVCTRL0_QSPI0_IO2(3)
+				     | DRVCTRL0_QSPI0_IO3(3)
+				     | DRVCTRL0_QSPI0_SSL(3)
+				     | DRVCTRL0_QSPI1_SPCLK(3)
+				     | DRVCTRL0_QSPI1_MOSI_IO0(3));
+	pfc_reg_write(PFC_DRVCTRL0, reg);
+	reg = mmio_read_32(PFC_DRVCTRL1);
+	reg = ((reg & DRVCTRL1_MASK) | DRVCTRL1_QSPI1_MISO_IO1(3)
+				     | DRVCTRL1_QSPI1_IO2(3)
+				     | DRVCTRL1_QSPI1_IO3(3)
+				     | DRVCTRL1_QSPI1_SS(3)
+				     | DRVCTRL1_RPC_INT(3)
+				     | DRVCTRL1_RPC_WP(3)
+				     | DRVCTRL1_RPC_RESET(3)
+				     | DRVCTRL1_AVB_RX_CTL(7));
+	pfc_reg_write(PFC_DRVCTRL1, reg);
+	reg = mmio_read_32(PFC_DRVCTRL2);
+	reg = ((reg & DRVCTRL2_MASK) | DRVCTRL2_AVB_RXC(7)
+				     | DRVCTRL2_AVB_RD0(7)
+				     | DRVCTRL2_AVB_RD1(7)
+				     | DRVCTRL2_AVB_RD2(7)
+				     | DRVCTRL2_AVB_RD3(7)
+				     | DRVCTRL2_AVB_TX_CTL(3)
+				     | DRVCTRL2_AVB_TXC(3)
+				     | DRVCTRL2_AVB_TD0(3));
+	pfc_reg_write(PFC_DRVCTRL2, reg);
+	reg = mmio_read_32(PFC_DRVCTRL3);
+	reg = ((reg & DRVCTRL3_MASK) | DRVCTRL3_AVB_TD1(3)
+				     | DRVCTRL3_AVB_TD2(3)
+				     | DRVCTRL3_AVB_TD3(3)
+				     | DRVCTRL3_AVB_TXCREFCLK(7)
+				     | DRVCTRL3_AVB_MDIO(7)
+				     | DRVCTRL3_AVB_MDC(7)
+				     | DRVCTRL3_AVB_MAGIC(7)
+				     | DRVCTRL3_AVB_PHY_INT(7));
+	pfc_reg_write(PFC_DRVCTRL3, reg);
+	reg = mmio_read_32(PFC_DRVCTRL4);
+	reg = ((reg & DRVCTRL4_MASK) | DRVCTRL4_AVB_LINK(7)
+				     | DRVCTRL4_AVB_AVTP_MATCH(7)
+				     | DRVCTRL4_AVB_AVTP_CAPTURE(7)
+				     | DRVCTRL4_IRQ0(7)
+				     | DRVCTRL4_IRQ1(7)
+				     | DRVCTRL4_IRQ2(7)
+				     | DRVCTRL4_IRQ3(7)
+				     | DRVCTRL4_IRQ4(7));
+	pfc_reg_write(PFC_DRVCTRL4, reg);
+	reg = mmio_read_32(PFC_DRVCTRL5);
+	reg = ((reg & DRVCTRL5_MASK) | DRVCTRL5_IRQ5(7)
+				     | DRVCTRL5_PWM0(7)
+				     | DRVCTRL5_PWM1(7)
+				     | DRVCTRL5_PWM2(7)
+				     | DRVCTRL5_A0(3)
+				     | DRVCTRL5_A1(3)
+				     | DRVCTRL5_A2(3)
+				     | DRVCTRL5_A3(3));
+	pfc_reg_write(PFC_DRVCTRL5, reg);
+	reg = mmio_read_32(PFC_DRVCTRL6);
+	reg = ((reg & DRVCTRL6_MASK) | DRVCTRL6_A4(3)
+				     | DRVCTRL6_A5(3)
+				     | DRVCTRL6_A6(3)
+				     | DRVCTRL6_A7(3)
+				     | DRVCTRL6_A8(7)
+				     | DRVCTRL6_A9(7)
+				     | DRVCTRL6_A10(7)
+				     | DRVCTRL6_A11(7));
+	pfc_reg_write(PFC_DRVCTRL6, reg);
+	reg = mmio_read_32(PFC_DRVCTRL7);
+	reg = ((reg & DRVCTRL7_MASK) | DRVCTRL7_A12(3)
+				     | DRVCTRL7_A13(3)
+				     | DRVCTRL7_A14(3)
+				     | DRVCTRL7_A15(3)
+				     | DRVCTRL7_A16(3)
+				     | DRVCTRL7_A17(3)
+				     | DRVCTRL7_A18(3)
+				     | DRVCTRL7_A19(3));
+	pfc_reg_write(PFC_DRVCTRL7, reg);
+	reg = mmio_read_32(PFC_DRVCTRL8);
+	reg = ((reg & DRVCTRL8_MASK) | DRVCTRL8_CLKOUT(7)
+				     | DRVCTRL8_CS0(7)
+				     | DRVCTRL8_CS1_A2(7)
+				     | DRVCTRL8_BS(7)
+				     | DRVCTRL8_RD(7)
+				     | DRVCTRL8_RD_W(7)
+				     | DRVCTRL8_WE0(7)
+				     | DRVCTRL8_WE1(7));
+	pfc_reg_write(PFC_DRVCTRL8, reg);
+	reg = mmio_read_32(PFC_DRVCTRL9);
+	reg = ((reg & DRVCTRL9_MASK) | DRVCTRL9_EX_WAIT0(7)
+				     | DRVCTRL9_PRESETOU(7)
+				     | DRVCTRL9_D0(7)
+				     | DRVCTRL9_D1(7)
+				     | DRVCTRL9_D2(7)
+				     | DRVCTRL9_D3(7)
+				     | DRVCTRL9_D4(7)
+				     | DRVCTRL9_D5(7));
+	pfc_reg_write(PFC_DRVCTRL9, reg);
+	reg = mmio_read_32(PFC_DRVCTRL10);
+	reg = ((reg & DRVCTRL10_MASK) | DRVCTRL10_D6(7)
+				      | DRVCTRL10_D7(7)
+				      | DRVCTRL10_D8(3)
+				      | DRVCTRL10_D9(3)
+				      | DRVCTRL10_D10(3)
+				      | DRVCTRL10_D11(3)
+				      | DRVCTRL10_D12(3)
+				      | DRVCTRL10_D13(3));
+	pfc_reg_write(PFC_DRVCTRL10, reg);
+	reg = mmio_read_32(PFC_DRVCTRL11);
+	reg = ((reg & DRVCTRL11_MASK) | DRVCTRL11_D14(3)
+				      | DRVCTRL11_D15(3)
+				      | DRVCTRL11_AVS1(7)
+				      | DRVCTRL11_AVS2(7)
+				      | DRVCTRL11_GP7_02(7)
+				      | DRVCTRL11_GP7_03(7)
+				      | DRVCTRL11_DU_DOTCLKIN0(3)
+				      | DRVCTRL11_DU_DOTCLKIN1(3));
+	pfc_reg_write(PFC_DRVCTRL11, reg);
+	reg = mmio_read_32(PFC_DRVCTRL12);
+	reg = ((reg & DRVCTRL12_MASK) | DRVCTRL12_DU_DOTCLKIN2(3)
+				      | DRVCTRL12_DU_DOTCLKIN3(3)
+				      | DRVCTRL12_DU_FSCLKST(3)
+				      | DRVCTRL12_DU_TMS(3));
+	pfc_reg_write(PFC_DRVCTRL12, reg);
+	reg = mmio_read_32(PFC_DRVCTRL13);
+	reg = ((reg & DRVCTRL13_MASK) | DRVCTRL13_TDO(3)
+				      | DRVCTRL13_ASEBRK(3)
+				      | DRVCTRL13_SD0_CLK(7)
+				      | DRVCTRL13_SD0_CMD(7)
+				      | DRVCTRL13_SD0_DAT0(7)
+				      | DRVCTRL13_SD0_DAT1(7)
+				      | DRVCTRL13_SD0_DAT2(7)
+				      | DRVCTRL13_SD0_DAT3(7));
+	pfc_reg_write(PFC_DRVCTRL13, reg);
+	reg = mmio_read_32(PFC_DRVCTRL14);
+	reg = ((reg & DRVCTRL14_MASK) | DRVCTRL14_SD1_CLK(7)
+				      | DRVCTRL14_SD1_CMD(7)
+				      | DRVCTRL14_SD1_DAT0(5)
+				      | DRVCTRL14_SD1_DAT1(5)
+				      | DRVCTRL14_SD1_DAT2(5)
+				      | DRVCTRL14_SD1_DAT3(5)
+				      | DRVCTRL14_SD2_CLK(5)
+				      | DRVCTRL14_SD2_CMD(5));
+	pfc_reg_write(PFC_DRVCTRL14, reg);
+	reg = mmio_read_32(PFC_DRVCTRL15);
+	reg = ((reg & DRVCTRL15_MASK) | DRVCTRL15_SD2_DAT0(5)
+				      | DRVCTRL15_SD2_DAT1(5)
+				      | DRVCTRL15_SD2_DAT2(5)
+				      | DRVCTRL15_SD2_DAT3(5)
+				      | DRVCTRL15_SD2_DS(5)
+				      | DRVCTRL15_SD3_CLK(7)
+				      | DRVCTRL15_SD3_CMD(7)
+				      | DRVCTRL15_SD3_DAT0(7));
+	pfc_reg_write(PFC_DRVCTRL15, reg);
+	reg = mmio_read_32(PFC_DRVCTRL16);
+	reg = ((reg & DRVCTRL16_MASK) | DRVCTRL16_SD3_DAT1(7)
+				      | DRVCTRL16_SD3_DAT2(7)
+				      | DRVCTRL16_SD3_DAT3(7)
+				      | DRVCTRL16_SD3_DAT4(7)
+				      | DRVCTRL16_SD3_DAT5(7)
+				      | DRVCTRL16_SD3_DAT6(7)
+				      | DRVCTRL16_SD3_DAT7(7)
+				      | DRVCTRL16_SD3_DS(7));
+	pfc_reg_write(PFC_DRVCTRL16, reg);
+	reg = mmio_read_32(PFC_DRVCTRL17);
+	reg = ((reg & DRVCTRL17_MASK) | DRVCTRL17_SD0_CD(7)
+				      | DRVCTRL17_SD0_WP(7)
+				      | DRVCTRL17_SD1_CD(7)
+				      | DRVCTRL17_SD1_WP(7)
+				      | DRVCTRL17_SCK0(7)
+				      | DRVCTRL17_RX0(7)
+				      | DRVCTRL17_TX0(7)
+				      | DRVCTRL17_CTS0(7));
+	pfc_reg_write(PFC_DRVCTRL17, reg);
+	reg = mmio_read_32(PFC_DRVCTRL18);
+	reg = ((reg & DRVCTRL18_MASK) | DRVCTRL18_RTS0_TANS(7)
+				      | DRVCTRL18_RX1(7)
+				      | DRVCTRL18_TX1(7)
+				      | DRVCTRL18_CTS1(7)
+				      | DRVCTRL18_RTS1_TANS(7)
+				      | DRVCTRL18_SCK2(7)
+				      | DRVCTRL18_TX2(7)
+				      | DRVCTRL18_RX2(7));
+	pfc_reg_write(PFC_DRVCTRL18, reg);
+	reg = mmio_read_32(PFC_DRVCTRL19);
+	reg = ((reg & DRVCTRL19_MASK) | DRVCTRL19_HSCK0(7)
+				      | DRVCTRL19_HRX0(7)
+				      | DRVCTRL19_HTX0(7)
+				      | DRVCTRL19_HCTS0(7)
+				      | DRVCTRL19_HRTS0(7)
+				      | DRVCTRL19_MSIOF0_SCK(7)
+				      | DRVCTRL19_MSIOF0_SYNC(7)
+				      | DRVCTRL19_MSIOF0_SS1(7));
+	pfc_reg_write(PFC_DRVCTRL19, reg);
+	reg = mmio_read_32(PFC_DRVCTRL20);
+	reg = ((reg & DRVCTRL20_MASK) | DRVCTRL20_MSIOF0_TXD(7)
+				      | DRVCTRL20_MSIOF0_SS2(7)
+				      | DRVCTRL20_MSIOF0_RXD(7)
+				      | DRVCTRL20_MLB_CLK(7)
+				      | DRVCTRL20_MLB_SIG(7)
+				      | DRVCTRL20_MLB_DAT(7)
+				      | DRVCTRL20_MLB_REF(7)
+				      | DRVCTRL20_SSI_SCK0129(7));
+	pfc_reg_write(PFC_DRVCTRL20, reg);
+	reg = mmio_read_32(PFC_DRVCTRL21);
+	reg = ((reg & DRVCTRL21_MASK) | DRVCTRL21_SSI_WS0129(7)
+				      | DRVCTRL21_SSI_SDATA0(7)
+				      | DRVCTRL21_SSI_SDATA1(7)
+				      | DRVCTRL21_SSI_SDATA2(7)
+				      | DRVCTRL21_SSI_SCK34(7)
+				      | DRVCTRL21_SSI_WS34(7)
+				      | DRVCTRL21_SSI_SDATA3(7)
+				      | DRVCTRL21_SSI_SCK4(7));
+	pfc_reg_write(PFC_DRVCTRL21, reg);
+	reg = mmio_read_32(PFC_DRVCTRL22);
+	reg = ((reg & DRVCTRL22_MASK) | DRVCTRL22_SSI_WS4(7)
+				      | DRVCTRL22_SSI_SDATA4(7)
+				      | DRVCTRL22_SSI_SCK5(7)
+				      | DRVCTRL22_SSI_WS5(7)
+				      | DRVCTRL22_SSI_SDATA5(7)
+				      | DRVCTRL22_SSI_SCK6(7)
+				      | DRVCTRL22_SSI_WS6(7)
+				      | DRVCTRL22_SSI_SDATA6(7));
+	pfc_reg_write(PFC_DRVCTRL22, reg);
+	reg = mmio_read_32(PFC_DRVCTRL23);
+	reg = ((reg & DRVCTRL23_MASK) | DRVCTRL23_SSI_SCK78(7)
+				      | DRVCTRL23_SSI_WS78(7)
+				      | DRVCTRL23_SSI_SDATA7(7)
+				      | DRVCTRL23_SSI_SDATA8(7)
+				      | DRVCTRL23_SSI_SDATA9(7)
+				      | DRVCTRL23_AUDIO_CLKA(7)
+				      | DRVCTRL23_AUDIO_CLKB(7)
+				      | DRVCTRL23_USB0_PWEN(7));
+	pfc_reg_write(PFC_DRVCTRL23, reg);
+	reg = mmio_read_32(PFC_DRVCTRL24);
+	reg = ((reg & DRVCTRL24_MASK) | DRVCTRL24_USB0_OVC(7)
+				      | DRVCTRL24_USB1_PWEN(7)
+				      | DRVCTRL24_USB1_OVC(7)
+				      | DRVCTRL24_USB30_PWEN(7)
+				      | DRVCTRL24_USB30_OVC(7)
+				      | DRVCTRL24_USB31_PWEN(7)
+				      | DRVCTRL24_USB31_OVC(7));
+	pfc_reg_write(PFC_DRVCTRL24, reg);
+#else  // RZG_HIHOPE_RZG2H
 	reg = mmio_read_32(PFC_DRVCTRL0);
 	reg = ((reg & DRVCTRL0_MASK) | DRVCTRL0_QSPI0_SPCLK(3)
 				     | DRVCTRL0_QSPI0_MOSI_IO0(3)
@@ -1388,8 +1955,18 @@ void pfc_init_h3_v2(void)
 				      | DRVCTRL24_USB31_PWEN(7)
 				      | DRVCTRL24_USB31_OVC(7));
 	pfc_reg_write(PFC_DRVCTRL24, reg);
+#endif // RZG_HIHOPE_RZG2H
 
 	/* initialize LSI pin pull-up/down control */
+#if RZG_HIHOPE_RZG2H
+	pfc_reg_write(PFC_PUD0,0x00005FBFU);
+	pfc_reg_write(PFC_PUD1,0x00300EFEU);
+	pfc_reg_write(PFC_PUD2,0x330001E6U);
+	pfc_reg_write(PFC_PUD3,0x000002E0U);
+	pfc_reg_write(PFC_PUD4,0xFFFFFF00U);
+	pfc_reg_write(PFC_PUD5,0x7F5FFF87U);
+	pfc_reg_write(PFC_PUD6,0x00000055U);
+#else  // RZG_HIHOPE_RZG2H
 	pfc_reg_write(PFC_PUD0, 0x00005FBFU);
 	pfc_reg_write(PFC_PUD1, 0x00300FFEU);
 	pfc_reg_write(PFC_PUD2, 0x330001E6U);
@@ -1397,8 +1974,18 @@ void pfc_init_h3_v2(void)
 	pfc_reg_write(PFC_PUD4, 0xFFFFFF00U);
 	pfc_reg_write(PFC_PUD5, 0x7F5FFF87U);
 	pfc_reg_write(PFC_PUD6, 0x00000055U);
+#endif // RZG_HIHOPE_RZG2H
 
 	/* initialize LSI pin pull-enable register */
+#if RZG_HIHOPE_RZG2H
+	pfc_reg_write(PFC_PUEN0,0x00000FFFU);
+	pfc_reg_write(PFC_PUEN1,0x00100234U);
+	pfc_reg_write(PFC_PUEN2,0x000004C4U);
+	pfc_reg_write(PFC_PUEN3,0x00000200U);
+	pfc_reg_write(PFC_PUEN4,0x3E000000U);
+	pfc_reg_write(PFC_PUEN5,0x1F000805U);
+	pfc_reg_write(PFC_PUEN6,0x00000006U);
+#else  // RZG_HIHOPE_RZG2H
 	pfc_reg_write(PFC_PUEN0, 0x00000FFFU);
 	pfc_reg_write(PFC_PUEN1, 0x00100234U);
 	pfc_reg_write(PFC_PUEN2, 0x000004C4U);
@@ -1406,6 +1993,7 @@ void pfc_init_h3_v2(void)
 	pfc_reg_write(PFC_PUEN4, 0x3E000000U);
 	pfc_reg_write(PFC_PUEN5, 0x1F000805U);
 	pfc_reg_write(PFC_PUEN6, 0x00000006U);
+#endif // RZG_HIHOPE_RZG2H
 
 	/* initialize positive/negative logic select */
 	mmio_write_32(GPIO_POSNEG0, 0x00000000U);
@@ -1428,13 +2016,34 @@ void pfc_init_h3_v2(void)
 	mmio_write_32(GPIO_IOINTSEL7, 0x00000000U);
 
 	/* initialize general output register */
+#if RZG_HIHOPE_RZG2H
+	mmio_write_32(GPIO_OUTDT0, 0x00000001U);
+	mmio_write_32(GPIO_OUTDT1, 0x00000000U);
+	mmio_write_32(GPIO_OUTDT2, 0x00000400U);
+	mmio_write_32(GPIO_OUTDT3, 0x00000000U);
+	mmio_write_32(GPIO_OUTDT4, 0x00000000U);
+	mmio_write_32(GPIO_OUTDT5, 0x00000000U);
+	mmio_write_32(GPIO_OUTDT6, 0x00003800U);
+	mmio_write_32(GPIO_OUTDT7, 0x00000003U);
+#else  // RZG_HIHOPE_RZG2H
 	mmio_write_32(GPIO_OUTDT1, 0x00000000U);
 	mmio_write_32(GPIO_OUTDT2, 0x00000400U);
 	mmio_write_32(GPIO_OUTDT3, 0x0000C000U);
 	mmio_write_32(GPIO_OUTDT5, 0x00000006U);
 	mmio_write_32(GPIO_OUTDT6, 0x00003880U);
+#endif // RZG_HIHOPE_RZG2H
 
 	/* initialize general input/output switching */
+#if RZG_HIHOPE_RZG2H
+	mmio_write_32(GPIO_INOUTSEL0, 0x00000001U);
+	mmio_write_32(GPIO_INOUTSEL1, 0x00100B00U);
+	mmio_write_32(GPIO_INOUTSEL2, 0x00000418U);
+	mmio_write_32(GPIO_INOUTSEL3, 0x00002000U);
+	mmio_write_32(GPIO_INOUTSEL4, 0x00000040U);
+	mmio_write_32(GPIO_INOUTSEL5, 0x00000208U);
+	mmio_write_32(GPIO_INOUTSEL6, 0x00013F00U);
+	mmio_write_32(GPIO_INOUTSEL7, 0x00000003U);
+#else  // RZG_HIHOPE_RZG2H
 	mmio_write_32(GPIO_INOUTSEL0, 0x00000000U);
 	mmio_write_32(GPIO_INOUTSEL1, 0x01000A00U);
 	mmio_write_32(GPIO_INOUTSEL2, 0x00000400U);
@@ -1443,4 +2052,5 @@ void pfc_init_h3_v2(void)
 	mmio_write_32(GPIO_INOUTSEL5, 0x0000020EU);
 	mmio_write_32(GPIO_INOUTSEL6, 0x00013880U);
 	mmio_write_32(GPIO_INOUTSEL7, 0x00000000U);
+#endif // RZG_HIHOPE_RZG2H
 }
diff --git a/plat/renesas/rcar/platform.mk b/plat/renesas/rcar/platform.mk
index 117bafb..13cafa4 100644
--- a/plat/renesas/rcar/platform.mk
+++ b/plat/renesas/rcar/platform.mk
@@ -267,6 +267,21 @@ else
       endif
       $(eval $(call add_define,RCAR_LSI_CUT))
     endif
+  else ifeq (${LSI},G2H)
+    RCAR_LSI:=${RCAR_H3N}
+    ifndef LSI_CUT
+      # enable compatible function.
+      RCAR_LSI_CUT_COMPAT := 1
+      $(eval $(call add_define,RCAR_LSI_CUT_COMPAT))
+    else
+      # disable compatible function.
+      ifeq (${LSI_CUT},30)
+        RCAR_LSI_CUT:=20
+      else
+        $(error "Error: ${LSI_CUT} is not supported.")
+      endif
+      $(eval $(call add_define,RCAR_LSI_CUT))
+    endif
   else
     $(error "Error: ${LSI} is not supported.")
   endif
@@ -449,6 +464,12 @@ RZG_HIHOPE_RZG2N := 0
 endif
 $(eval $(call add_define,RZG_HIHOPE_RZG2N))
 
+#Process HIHOPE RZ/G2H flag
+ifndef RZG_HIHOPE_RZG2H
+RZG_HIHOPE_RZG2H := 0
+endif
+$(eval $(call add_define,RZG_HIHOPE_RZG2H))
+
 # RCAR_SYSTEM_RESET_KEEPON_DDR requires power control of PMIC etc.
 # When executing SYSTEM_SUSPEND other than Salvator-X, Salvator-XS and Ebisu,
 # processing equivalent to that implemented in PMIC_ROHM_BD9571 is necessary.
diff --git a/tools/dummy_create/makefile b/tools/dummy_create/makefile
index f1cf2a2..a4d4ed7 100644
--- a/tools/dummy_create/makefile
+++ b/tools/dummy_create/makefile
@@ -73,6 +73,11 @@ RZG_HIHOPE_RZG2N := 0
 endif
 $(eval $(call add_define,RZG_HIHOPE_RZG2N))
 
+#Process HIHOPE RZ/G2H flag
+ifndef RZG_HIHOPE_RZG2H
+RZG_HIHOPE_RZG2H := 0
+endif
+$(eval $(call add_define,RZG_HIHOPE_RZG2H))
 ###################################################
 
 #c compiler
diff --git a/tools/dummy_create/sa6.c b/tools/dummy_create/sa6.c
index d6f53c9..29be0f3 100644
--- a/tools/dummy_create/sa6.c
+++ b/tools/dummy_create/sa6.c
@@ -22,11 +22,11 @@
 /* Reserved */
 #define RCAR_BL32_PARTITION		(0x00000000U)
 /* Source address on flash for BL33 */
-#if (RZG_EK874 | RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M)
+#if (RZG_EK874 | RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M | RZG_HIHOPE_RZG2H)
 #define RCAR_BL33SRC_ADDRESS		(0x00300000U)
-#else	// RZG_EK874 | RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M
+#else	// RZG_EK874 | RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M | RZG_HIHOPE_RZG2H
 #define RCAR_BL33SRC_ADDRESS		(0x00640000U)
-#endif	// RZG_EK874 | RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M
+#endif	// RZG_EK874 | RZG_HIHOPE_RZG2N | RZG_HIHOPE_RZG2M | RZG_HIHOPE_RZG2H
 /* Reserved */
 #define RCAR_BL33_PARTITION		(0x00000000U)
 #define RCAR_BL332SRC_ADDRESS		(0x00000000U)
-- 
2.7.4

