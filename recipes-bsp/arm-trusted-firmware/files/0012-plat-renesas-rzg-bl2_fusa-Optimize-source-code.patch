From 6538e0ff7b043ff5a09bb3bbf128c84d6b41167d Mon Sep 17 00:00:00 2001
From: Huynh Thanh Hung <hung.huynh.wz@renesas.com>
Date: Wed, 5 Aug 2020 15:16:59 +0700
Subject: [PATCH 13/14] plat: renesas: rzg: bl2_fusa: Optimize source code

This patch will combine all functions setting ECC for each board into 2
functions only.
This optimize will help us maintain/add support easily in the future.

Signed-off-by: Huynh Thanh Hung <hung.huynh.wz@renesas.com>
---
 plat/renesas/rzg/bl2_fusa.c | 254 +++++++++++++-----------------------
 1 file changed, 93 insertions(+), 161 deletions(-)

diff --git a/plat/renesas/rzg/bl2_fusa.c b/plat/renesas/rzg/bl2_fusa.c
index 13df9fb6d..d93ba7946 100644
--- a/plat/renesas/rzg/bl2_fusa.c
+++ b/plat/renesas/rzg/bl2_fusa.c
@@ -9,6 +9,7 @@
 #include <common/debug.h>
 #include <lib/mmio.h>
 
+#if (RZG_DRAM_ECC == 1)
 #define FUSA_DRAM_CLEAR		1
 
 #define	DFUSAAREACR		0xE6785000	/* DRAM FuSa Area Conf */
@@ -40,42 +41,52 @@
 #define	ARRAY_SIZE(a)		(sizeof(a) / sizeof(a[0]))
 #endif
 
-#define	EK874_FUSAAREA			0x408000000
-#define	EK874_FUSAAREA_TOTAL		((128+256+256+256+64)*1024*1024)
-#define	EK874_ECCAREA			0x444000000
-#define	EK874_ECCAREA_TOTAL		((128+256+256+256+64)*1024*1024)
-#define	HHOPE_G2N_FUSAAREA		0x408000000
-#define	HHOPE_G2N_FUSAAREA_TOTAL	((128+256+512+512+512+64)*1024*1024)
-#define	HHOPE_G2N_ECCAREA		0x484000000
-#define	HHOPE_G2N_ECCAREA_TOTAL		((128+256+512+512+512+64)*1024*1024)
-#define	HHOPE_G2M_FUSAAREA		0x408000000
-#define	HHOPE_G2M_FUSAAREA_TOTAL	((1920)*1024*1024)
-#define	HHOPE_G2M_ECCAREA		0x608000000
-#define	HHOPE_G2M_ECCAREA_TOTAL		((1920)*1024*1024)
-
+#if (RZG_EK874 == 1)
+#define	FUSAAREA1			0x408000000
+#define	FUSAAREA1_TOTAL		((128+256+256+256+64)*1024*1024)
+#define	ECCAREA1			0x444000000
+#define	ECCAREA1_TOTAL		((128+256+256+256+64)*1024*1024)
+#endif //(RZG_EK874 == 1)
+
+#if (RZG_HIHOPE_RZG2N == 1)
+#define	FUSAAREA1		0x408000000
+#define	FUSAAREA1_TOTAL	((128+256+512+512+512+64)*1024*1024)
+#define	ECCAREA1		0x484000000
+#define	ECCAREA1_TOTAL		((128+256+512+512+512+64)*1024*1024)
+#endif //(RZG_HIHOPE_RZG2N == 1)
+
+#if (RZG_HIHOPE_RZG2M == 1)
+#define	FUSAAREA1		0x408000000
+#define	FUSAAREA1_TOTAL	((1920)*1024*1024)
+#define	ECCAREA1		0x608000000
+#define	ECCAREA1_TOTAL		((1920)*1024*1024)
+#endif //(RZG_HIHOPE_RZG2M == 1)
+
+#if (RZG_HIHOPE_RZG2H == 1)
 #if (RZG_DRAM_ECC_FULL == 1)
-#define	HHOPE_G2H_FUSAAREA1		0x408000000
-#define	HHOPE_G2H_FUSAAREA1_TOTAL	((1920)*1024*1024)
-#define	HHOPE_G2H_ECCAREA1		0x608000000
-#define	HHOPE_G2H_ECCAREA1_TOTAL	((1920)*1024*1024)
+#define	FUSAAREA1		0x408000000
+#define	FUSAAREA1_TOTAL	((1920)*1024*1024)
+#define	ECCAREA1		0x608000000
+#define	ECCAREA1_TOTAL	((1920)*1024*1024)
 #else
-#define	HHOPE_G2H_FUSAAREA1		0x408000000
-#define	HHOPE_G2H_FUSAAREA1_TOTAL	((960)*1024*1024)
-#define	HHOPE_G2H_ECCAREA1		0x444000000
-#define	HHOPE_G2H_ECCAREA1_TOTAL	((960)*1024*1024)
-
-#define	HHOPE_G2H_FUSAAREA2		0x600000000
-#define	HHOPE_G2H_FUSAAREA2_TOTAL	((1024)*1024*1024)
-#define	HHOPE_G2H_ECCAREA2		0x640000000
-#define	HHOPE_G2H_ECCAREA2_TOTAL	((1024)*1024*1024)
+#define	FUSAAREA1		0x408000000
+#define	FUSAAREA1_TOTAL	((960)*1024*1024)
+#define	ECCAREA1		0x444000000
+#define	ECCAREA1_TOTAL	((960)*1024*1024)
+
+#define	FUSAAREA2		0x600000000
+#define	FUSAAREA2_TOTAL	((1024)*1024*1024)
+#define	ECCAREA2		0x640000000
+#define	ECCAREA2_TOTAL	((1024)*1024*1024)
 #endif
+#endif //(RZG_HIHOPE_RZG2H == 1)
 
 struct rzg2_ecc_conf {
 	uint32_t fusaareacr;
 	uint32_t eccareacr;
 };
 
-#if (RZG_DRAM_ECC == 1 && RZG_EK874 == 1)
+#if (RZG_EK874 == 1)
 static const struct rzg2_ecc_conf rzg2_ek874_conf[] = {
 #if (RZG_DRAM_ECC_FULL == 2) // ECC Full mode single channel
 	{ FUSAAREACR(1, 7, 0x408000000),    ECCAREACR(0, 0x448000000)   }, /* 128+128 MB */
@@ -104,7 +115,7 @@ static const struct rzg2_ecc_conf rzg2_ek874_conf[] = {
 };
 #endif
 
-#if (RZG_DRAM_ECC == 1 && RZG_HIHOPE_RZG2N == 1)
+#if (RZG_HIHOPE_RZG2N == 1)
 static const struct rzg2_ecc_conf rzg2_hihope_rzg2n_conf[] = {
 #if (RZG_DRAM_ECC_FULL == 2) // ECC Full mode single channel
 	{ FUSAAREACR(1, 7, 0x408000000),    ECCAREACR(0, 0x498000000)   }, /* 128+128 MB */
@@ -134,7 +145,7 @@ static const struct rzg2_ecc_conf rzg2_hihope_rzg2n_conf[] = {
 };
 #endif
 
-#if (RZG_DRAM_ECC == 1 && RZG_HIHOPE_RZG2H == 1)
+#if (RZG_HIHOPE_RZG2H == 1)
 static const struct rzg2_ecc_conf rzg2_hihope_rzg2h_conf[] = {
 #if (RZG_DRAM_ECC_FULL == 2)   // ECC Full mode single channel
 	{ FUSAAREACR(1, 6, 0x450000000), ECCAREACR(0, 0x454000000) }, /* 64+64 MB */
@@ -164,7 +175,7 @@ static const struct rzg2_ecc_conf rzg2_hihope_rzg2h_conf[] = {
 };
 #endif
 
-#if ((RZG_HIHOPE_RZG2M == 1 || RZG_HIHOPE_RZG2H == 1) && RZG_DRAM_ECC == 1)
+#if (RZG_HIHOPE_RZG2M == 1 || RZG_HIHOPE_RZG2H == 1)
 #if (RZG_DRAM_ECC_FULL == 1) // ECC Full mode dual channel
 static const uint32_t fusacr = EFUSASEL(0xF0) | DFUSASEL(0xF8)| SFUSASEL(0);
 static const uint32_t adsplcr0 = ADRMODE(0) | SPLITSEL(1) | AREA(0x1C) | SWP(0);
@@ -178,7 +189,7 @@ static const uint32_t adsplcr1 = 0;
 static const uint32_t adsplcr2 = 0;
 static const uint32_t adsplcr3 = 0;
 #endif //(RZG_DRAM_ECC_FULL == 1)
-#endif //((RZG_HIHOPE_RZG2M == 1 || RZG_HIHOPE_RZG2H == 1) && RZG_DRAM_ECC == 1)
+#endif //(RZG_HIHOPE_RZG2M == 1 || RZG_HIHOPE_RZG2H == 1)
 
 #if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL != 0))
 /* Write zero-valued octa-byte words */
@@ -193,90 +204,20 @@ static void bzero64(uintptr_t start, uint64_t size)
 }
 #endif //((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL != 0))
 
-/* Setup DRAM ECC configuration registers */
-#if (RZG_DRAM_ECC == 1 && RZG_EK874 == 1)
-static void bl2_enable_ecc_ek874(void)
-{
-	const struct rzg2_ecc_conf *conf;
-	int n;
-	int nb_of_conf;
-
-	conf = rzg2_ek874_conf;
-	nb_of_conf = ARRAY_SIZE(rzg2_ek874_conf);
-
-#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 2))
-	/* Clear DRAM ECC Area (for check) */
-	NOTICE("BL2: Clearing ECC area from %lx\n", EK874_ECCAREA);
-	bzero64(EK874_ECCAREA, (uint64_t)EK874_ECCAREA_TOTAL);
-#endif //((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
-
-	for (n = 0; n < nb_of_conf; n++, conf++) {
-		mmio_write_32((uintptr_t)((uint32_t *)DFUSAAREACR + n), conf->fusaareacr);
-		mmio_write_32((uintptr_t)((uint32_t *)DECCAREACR + n), conf->eccareacr);
-		if(conf->fusaareacr & ((uint32_t) 1 << 31))
-			NOTICE("BL2: DRAM ECC area=%d, FuSa=0x%x ECC=0x%x, size=%d MB\n",
-					n, conf->fusaareacr, conf->eccareacr,
-					1 << ((conf->fusaareacr >> 24) & 0xf));
-
-	}
-
-#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 2))
-	/* Clear DRAM data area to initialize ECC area */
-	NOTICE("BL2: Clearing DATA area from %lx\n", EK874_FUSAAREA);
-	bzero64(EK874_FUSAAREA, (uint64_t)EK874_FUSAAREA_TOTAL);
-#endif //((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
-
-}
-#endif
-
-#if (RZG_DRAM_ECC == 1 && RZG_HIHOPE_RZG2N == 1)
-static void bl2_enable_ecc_hihope_rzg2n(void)
-{
-	const struct rzg2_ecc_conf *conf;
-	int n;
-	int nb_of_conf;
-
-	conf = rzg2_hihope_rzg2n_conf;
-	nb_of_conf = ARRAY_SIZE(rzg2_hihope_rzg2n_conf);
-
-#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 2))
-	/* Clear DRAM ECC Area (for check) */
-	NOTICE("BL2: Clearing ECC area from %lx\n", HHOPE_G2N_ECCAREA);
-	bzero64(HHOPE_G2N_ECCAREA, (uint64_t)HHOPE_G2N_ECCAREA_TOTAL);
-#endif //((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
-
-	for (n = 0; n < nb_of_conf; n++, conf++) {
-		mmio_write_32((uintptr_t)((uint32_t *)DFUSAAREACR + n), conf->fusaareacr);
-		mmio_write_32((uintptr_t)((uint32_t *)DECCAREACR + n), conf->eccareacr);
-		if(conf->fusaareacr & ((uint32_t) 1 << 31))
-			NOTICE("BL2: DRAM ECC area=%d, FuSa=0x%x ECC=0x%x, size=%d MB\n",
-					n, conf->fusaareacr, conf->eccareacr,
-					1 << ((conf->fusaareacr >> 24) & 0xf));
-	}
-
-#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 2))
-	/* Clear DRAM ECC Area (for check) */
-	NOTICE("BL2: Clearing DATA area from %lx\n", HHOPE_G2N_FUSAAREA);
-	bzero64(HHOPE_G2N_FUSAAREA, (uint64_t)HHOPE_G2N_FUSAAREA_TOTAL);
-#endif //((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 2))
-
-}
-#endif
-
-#if (RZG_DRAM_ECC == 1 && RZG_HIHOPE_RZG2M == 1)
-static void bl2_enable_ecc_hihope_rzg2m(void)
+#if ((RZG_HIHOPE_RZG2M == 1) || (RZG_HIHOPE_RZG2H == 1))
+void bl2_ecc_dual_init()
 {
 #if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
 	/* Clear DRAM ECC Area (for check) */
-	NOTICE("BL2: Clearing ECC area from %lx\n", HHOPE_G2M_ECCAREA);
-	bzero64(HHOPE_G2M_ECCAREA, (uint64_t)HHOPE_G2M_ECCAREA_TOTAL);
+	NOTICE("BL2: Clearing ECC area from %lx\n", ECCAREA1);
+	bzero64(ECCAREA1, (uint64_t)ECCAREA1_TOTAL);
 #endif //((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
 
 	mmio_write_32((uintptr_t)((uint32_t *)ADSPLCR0), adsplcr0);
 	mmio_write_32((uintptr_t)((uint32_t *)ADSPLCR1), adsplcr1);
 	mmio_write_32((uintptr_t)((uint32_t *)ADSPLCR2), adsplcr2);
 	mmio_write_32((uintptr_t)((uint32_t *)ADSPLCR3), adsplcr3);
-	mmio_write_32((uintptr_t)((uint32_t *)FUSACR),	fusacr);
+	mmio_write_32((uintptr_t)((uint32_t *)FUSACR),  fusacr);
 
 	NOTICE("BL2: DRAM ECC Configured:\n");
 	NOTICE("     ADSPLCR0=0x%x\n", adsplcr0);
@@ -287,83 +228,74 @@ static void bl2_enable_ecc_hihope_rzg2m(void)
 
 #if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
 	/* Clear DRAM data area to initialize ECC area */
-	NOTICE("BL2: Clearing DATA area from %lx\n", HHOPE_G2M_FUSAAREA);
-	bzero64(HHOPE_G2M_FUSAAREA, (uint64_t)HHOPE_G2M_FUSAAREA_TOTAL);
+	NOTICE("BL2: Clearing DATA area from %lx\n", FUSAAREA1);
+	bzero64(FUSAAREA1, (uint64_t)FUSAAREA1_TOTAL);
 #endif //((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
-
 }
-#endif
+#endif //((RZG_HIHOPE_RZG2M == 1) || (RZG_HIHOPE_RZG2H == 1))
 
-#if (RZG_DRAM_ECC == 1 && RZG_HIHOPE_RZG2H == 1)
-void bl2_enable_ecc_hihope_rzg2h(void)
+#if ((RZG_EK874 == 1) || (RZG_HIHOPE_RZG2N == 1) || (RZG_HIHOPE_RZG2H == 1))
+void bl2_ecc_single_init(const struct rzg2_ecc_conf *conf, int nb_of_conf)
 {
-	const struct rzg2_ecc_conf *conf;
 	int n;
-	int nb_of_conf;
-
-	conf = rzg2_hihope_rzg2h_conf;
-	nb_of_conf = ARRAY_SIZE(rzg2_hihope_rzg2h_conf);
 
-#if (FUSA_DRAM_CLEAR == 1)
+#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 2))
 	/* Clear DRAM ECC Area (for check) */
-#if (RZG_DRAM_ECC_FULL != 0)
-	NOTICE("BL2: Clearing ECC area from %lx\n", HHOPE_G2H_ECCAREA1);
-	bzero64(HHOPE_G2H_ECCAREA1, (uint64_t)HHOPE_G2H_ECCAREA1_TOTAL);
-#endif //(RZG_DRAM_ECC_FULL != 0)
-#if (RZG_DRAM_ECC_FULL == 2)
-	NOTICE("BL2: Clearing ECC area from %lx\n", HHOPE_G2H_ECCAREA2);
-	bzero64(HHOPE_G2H_ECCAREA2, (uint64_t)HHOPE_G2H_ECCAREA2_TOTAL);
-#endif //(RZG_DRAM_ECC_FULL == 2)
-#endif //((FUSA_DRAM_CLEAR == 1)
-	mmio_write_32((uintptr_t)((uint32_t *)ADSPLCR0), adsplcr0);
-	mmio_write_32((uintptr_t)((uint32_t *)ADSPLCR1), adsplcr1);
-	mmio_write_32((uintptr_t)((uint32_t *)ADSPLCR2), adsplcr2);
-	mmio_write_32((uintptr_t)((uint32_t *)ADSPLCR3), adsplcr3);
-	mmio_write_32((uintptr_t)((uint32_t *)FUSACR),fusacr);
+	NOTICE("BL2: Clearing ECC area from %lx\n", ECCAREA1);
+	bzero64(ECCAREA1, (uint64_t)ECCAREA1_TOTAL);
+#if (defined (ECCAREA2) && defined (ECCAREA2_TOTAL))
+	NOTICE("BL2: Clearing ECC area from %lx\n", ECCAREA2);
+	bzero64(ECCAREA2, (uint64_t)ECCAREA2_TOTAL);
+#endif //(defined (ECCAREA2) && defined (ECCAREA2_TOTAL))
+#endif //((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 2))
 
-	NOTICE("BL2: DRAM ECC Configured:\n");
-	NOTICE("     ADSPLCR0=0x%x\n",adsplcr0);
-	NOTICE("     ADSPLCR1=0x%x\n",adsplcr1);
-	NOTICE("     ADSPLCR2=0x%x\n",adsplcr2);
-	NOTICE("     ADSPLCR3=0x%x\n",adsplcr3);
-	NOTICE("     FUSACR=0x%x\n",fusacr);
 	for (n = 0; n < nb_of_conf; n++, conf++) {
 		mmio_write_32((uintptr_t)((uint32_t *)DFUSAAREACR + n),
-				conf->fusaareacr);
+			      conf->fusaareacr);
 		mmio_write_32((uintptr_t)((uint32_t *)DECCAREACR + n),
-				conf->eccareacr);
-		if(conf->fusaareacr & ((uint32_t)1 << 31))
-			NOTICE("BL2: DRAM ECC area=%d, FuSa=0x%x ECC=0x%x,\
-				size=%d MB\n",
-				n, conf->fusaareacr, conf->eccareacr,
-				1 << ((conf->fusaareacr >> 24) & 0xf));
-       }
-#if (FUSA_DRAM_CLEAR == 1)
+			      conf->eccareacr);
+		if(conf->fusaareacr & ((uint32_t) 1 << 31)) {
+			NOTICE("BL2: DRAM ECC area=%d, size=%d MB, \n",
+			       n, 1 << ((conf->fusaareacr >> 24) & 0xf));
+			NOTICE("\t FuSa=0x%x ECC=0x%x \n",
+			       conf->fusaareacr, conf->eccareacr);
+		}
+	}
+
+#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 2))
 	/* Clear DRAM data area to initialize ECC area */
-#if (RZG_DRAM_ECC_FULL != 0)
-	NOTICE("BL2: Clearing DATA area from %lx\n", HHOPE_G2H_FUSAAREA1);
-	bzero64(HHOPE_G2H_FUSAAREA1, (uint64_t)HHOPE_G2H_FUSAAREA1_TOTAL);
-#endif //(RZG_DRAM_ECC_FULL != 0)
-#if (RZG_DRAM_ECC_FULL == 2)
-	NOTICE("BL2: Clearing DATA area from %lx\n", HHOPE_G2H_FUSAAREA2);
-	bzero64(HHOPE_G2H_FUSAAREA2, (uint64_t)HHOPE_G2H_FUSAAREA2_TOTAL);
-#endif //(RZG_DRAM_ECC_FULL == 2)
-#endif //(FUSA_DRAM_CLEAR == 1)
+	NOTICE("BL2: Clearing DATA area from %lx\n", FUSAAREA1);
+	bzero64(FUSAAREA1, (uint64_t)FUSAAREA1_TOTAL);
+#if (defined (FUSAAREA2) && defined (FUSAAREA2_TOTAL))
+	NOTICE("BL2: Clearing DATA area from %lx\n", FUSAAREA2);
+	bzero64(FUSAAREA2, (uint64_t)FUSAAREA2_TOTAL);
+#endif //(defined (FUSAAREA2) && defined (FUSAAREA2_TOTAL))
+#endif //((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 2))
 }
-#endif
+#endif //((RZG_EK874 == 1) || (RZG_HIHOPE_RZG2N == 1) || (RZG_HIHOPE_RZG2H == 1))
+
+#endif //(RZG_DRAM_ECC == 1)
 
 void bl2_ecc_init(void)
 {
 #if (RZG_DRAM_ECC == 1)
 
+#if (RZG_EK874 == 1 || RZG_HIHOPE_RZG2N == 1 || RZG_HIHOPE_RZG2H == 1)
+	int nb_of_conf = 0;
+#endif
+
 #if (RZG_EK874 == 1)
-	bl2_enable_ecc_ek874();
+	nb_of_conf = ARRAY_SIZE(rzg2_ek874_conf);
+	bl2_ecc_single_init(rzg2_ek874_conf, nb_of_conf);
 #elif (RZG_HIHOPE_RZG2M == 1)
-	bl2_enable_ecc_hihope_rzg2m();
+	bl2_ecc_dual_init();
 #elif (RZG_HIHOPE_RZG2N == 1)
-	bl2_enable_ecc_hihope_rzg2n();
+	nb_of_conf = ARRAY_SIZE(rzg2_hihope_rzg2n_conf);
+	bl2_ecc_single_init(rzg2_hihope_rzg2n_conf, nb_of_conf);
 #elif (RZG_HIHOPE_RZG2H == 1)
-	bl2_enable_ecc_hihope_rzg2h();
+	nb_of_conf = ARRAY_SIZE(rzg2_hihope_rzg2h_conf);
+	bl2_ecc_dual_init();
+	bl2_ecc_single_init(rzg2_hihope_rzg2h_conf, nb_of_conf);
 	return;
 #else
 #error "Don't have ECC initialize routine(unknown)."
-- 
2.17.1

