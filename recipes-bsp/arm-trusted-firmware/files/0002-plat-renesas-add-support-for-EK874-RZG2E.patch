diff --git a/plat/renesas/rcar/bl2_rcar_setup.c b/plat/renesas/rcar/bl2_rcar_setup.c
index 516ab09..262023d 100644
--- a/plat/renesas/rcar/bl2_rcar_setup.c
+++ b/plat/renesas/rcar/bl2_rcar_setup.c
@@ -127,8 +127,13 @@
 #define TARGET_PRODUCT		RCAR_PRODUCT_M3N
 #define TARGET_NAME		"R-Car M3N"
 #elif RCAR_LSI == RCAR_E3
+#if(RZG_EK874) // RZG_EK874
+#define TARGET_PRODUCT		RCAR_PRODUCT_E3
+#define TARGET_NAME		"RZ G2E"
+#else // RZG_EK874
 #define TARGET_PRODUCT		RCAR_PRODUCT_E3
 #define TARGET_NAME		"R-Car E3"
+#endif // RZG_EK874
 #elif RCAR_LSI == RCAR_AUTO
 #define TARGET_NAME		"R-Car H3/M3/M3N"
 #endif
@@ -385,7 +390,11 @@ static void rcar_bl2_early_platform_setup(const meminfo_t *mem_layout)
 	const char *product_h3      = "H3";
 	const char *product_m3      = "M3";
 	const char *product_m3n     = "M3N";
+#if(RZG_EK874) // RZG_EK874
+	const char *product_e3      = "G2E";
+#else // RZG_EK874
 	const char *product_e3      = "E3";
+#endif // RZG_EK874
 	const char *lcs_cm          = "CM";
 	const char *lcs_dm          = "DM";
 	const char *lcs_sd          = "SD";
@@ -488,9 +497,15 @@ static void rcar_bl2_early_platform_setup(const meminfo_t *mem_layout)
 			(prr_val & RCAR_MINOR_MASK) + RCAR_M3_MINOR_OFFSET);
 		}
 	} else {
+#if (RZG_EK874) //RZG_EK874
+		(void)sprintf(msg, "BL2: PRR is RZG %s Ver.%d.%d\n", str,
+			((prr_val & RCAR_MAJOR_MASK) >> RCAR_MAJOR_SHIFT)
+			 + RCAR_MAJOR_OFFSET, (prr_val & RCAR_MINOR_MASK));
+#else //RZG_EK874
 		(void)sprintf(msg, "BL2: PRR is R-Car %s Ver.%d.%d\n", str,
 			((prr_val & RCAR_MAJOR_MASK) >> RCAR_MAJOR_SHIFT)
 			 + RCAR_MAJOR_OFFSET, (prr_val & RCAR_MINOR_MASK));
+#endif //RZG_EK874
 	}
 	NOTICE("%s", msg);
 
@@ -518,6 +533,7 @@ static void rcar_bl2_early_platform_setup(const meminfo_t *mem_layout)
 	case BOARD_EBISU:
 	case BOARD_STARTER_KIT_PRE:
 	case BOARD_EBISU_4D:
+	case BOARD_EK874:
 		/* Do nothing. */
 		break;
 	default:
diff --git a/plat/renesas/rcar/bl2_secure_setting.c b/plat/renesas/rcar/bl2_secure_setting.c
index 2469780..2418e2d 100644
--- a/plat/renesas/rcar/bl2_secure_setting.c
+++ b/plat/renesas/rcar/bl2_secure_setting.c
@@ -91,7 +91,12 @@ static const struct {
 	/** Security attribute setting for slave ports 13 */
 	/* Bit22: RPC slave ports. */
 	/*        0: registers can be accessed from secure resource only. */
+#if RZG_EK874
+	/* Permit RPC access from non-secure resource */
+	{SEC_SEL13,		0xFFFFFFFFU},
+#else	// RZG_EK874
 	{SEC_SEL13,		0xFFBFFFFFU},
+#endif	// RZG_EK874
 
 	/** Security attribute setting for slave ports 14 */
 	/* Bit27: System Timer (SCMT) slave ports. */
@@ -222,8 +227,14 @@ static const struct {
 	/** Security group 1 attribute setting for slave ports 13 */
 	/* Bit22: RPC slave ports. */
 	/*        SecurityGroup3 */
+#if RZG_EK874
+	/* Permit RPC access from non-secure resource */
+	{SEC_GRP0COND13,	0x00000000U},
+	{SEC_GRP1COND13,	0x00000000U},
+#else	// RZG_EK874
 	{SEC_GRP0COND13,	0x00400000U},
 	{SEC_GRP1COND13,	0x00400000U},
+#endif	// RZG_EK874
 
 	/** Security group 0 attribute setting for slave ports 14 */
 	/** Security group 1 attribute setting for slave ports 14 */
diff --git a/plat/renesas/rcar/drivers/board/board.c b/plat/renesas/rcar/drivers/board/board.c
index 4e3a21a..416826c 100644
--- a/plat/renesas/rcar/drivers/board/board.c
+++ b/plat/renesas/rcar/drivers/board/board.c
@@ -14,7 +14,11 @@
  ************************************************************************/
 #ifndef BOARD_DEFAULT
 #if (RCAR_LSI == RCAR_E3)
+#if RZG_EK874
+#define BOARD_DEFAULT		(BOARD_EK874 << BOARD_CODE_SHIFT)
+#else
 #define BOARD_DEFAULT		(BOARD_EBISU << BOARD_CODE_SHIFT)
+#endif
 #else  /* (RCAR_LSI == RCAR_E3) */
 #define BOARD_DEFAULT		(BOARD_SALVATOR_X << BOARD_CODE_SHIFT)
 #endif /* (RCAR_LSI == RCAR_E3) */
@@ -41,6 +45,7 @@ const char *g_board_tbl[] = {
 	[BOARD_EBISU]		= "Ebisu",
 	[BOARD_STARTER_KIT_PRE]	= "Starter Kit",
 	[BOARD_EBISU_4D]	= "Ebisu-4D",
+	[BOARD_EK874]		= "EK874 RZ/G2E",
 	[BOARD_UNKNOWN]		= "unknown"
 };
 
@@ -65,6 +70,8 @@ int32_t get_board_type(uint32_t *type, uint32_t *rev)
 					   0xFFU, 0xFFU, 0xFFU, 0xFFU},
 		[BOARD_EBISU_4D]	= {0x10U, 0xFFU, 0xFFU, 0xFFU,
 					   0xFFU, 0xFFU, 0xFFU, 0xFFU},
+		[BOARD_EK874]		= {0x10U, 0xFFU, 0xFFU, 0xFFU,
+					   0xFFU, 0xFFU, 0xFFU, 0xFFU},
 	};
 
 	if (BOARD_ID_UNKNOWN == g_board_id) {
diff --git a/plat/renesas/rcar/drivers/board/board.h b/plat/renesas/rcar/drivers/board/board.h
index d6ac6da..ffc3c31 100644
--- a/plat/renesas/rcar/drivers/board/board.h
+++ b/plat/renesas/rcar/drivers/board/board.h
@@ -18,7 +18,9 @@
 #define BOARD_EBISU			(0x08U)
 #define BOARD_STARTER_KIT_PRE		(0x0BU)
 #define BOARD_EBISU_4D			(0x0DU)
-#define BOARD_UNKNOWN			(BOARD_EBISU_4D+1U)
+#define BOARD_EK874			(0x0EU)
+
+#define BOARD_UNKNOWN			(BOARD_EK874+1U)
 
 #define BOARD_REV_UNKNOWN		(0xFFU)
 
diff --git a/plat/renesas/rcar/pfc/E3/pfc_init_e3.c b/plat/renesas/rcar/pfc/E3/pfc_init_e3.c
index 77b799b..f6d1d8d 100644
--- a/plat/renesas/rcar/pfc/E3/pfc_init_e3.c
+++ b/plat/renesas/rcar/pfc/E3/pfc_init_e3.c
@@ -491,6 +491,27 @@ void pfc_init_e3(void)
 				  | MOD_SEL0_SCIF0_A
 				  | MOD_SEL0_SCIF2_A
 				  | MOD_SEL0_SPEED_PULSE_IF_A);
+#if RZG_EK874
+	pfc_reg_write(PFC_MOD_SEL1, MOD_SEL1_SIMCARD_A
+				  | MOD_SEL1_SSI2_A
+				  | MOD_SEL1_TIMER_TMU_A
+				  | MOD_SEL1_USB20_CH0_B
+				  | MOD_SEL1_DRIF2_A
+				  | MOD_SEL1_DRIF3_A
+				  | MOD_SEL1_HSCIF3_C /* for EK874 */
+				  | MOD_SEL1_HSCIF4_B /* for EK874 */
+				  | MOD_SEL1_I2C6_A
+				  | MOD_SEL1_I2C7_A
+				  | MOD_SEL1_MSIOF2_A
+				  | MOD_SEL1_MSIOF3_A
+				  | MOD_SEL1_SCIF3_A
+				  | MOD_SEL1_SCIF4_A
+				  | MOD_SEL1_SCIF5_A
+				  | MOD_SEL1_VIN4_A
+				  | MOD_SEL1_VIN5_A
+				  | MOD_SEL1_ADGC_A
+				  | MOD_SEL1_SSI9_A);
+#else	// RZG_EK874
 	pfc_reg_write(PFC_MOD_SEL1, MOD_SEL1_SIMCARD_A
 				  | MOD_SEL1_SSI2_A
 				  | MOD_SEL1_TIMER_TMU_A
@@ -510,8 +531,138 @@ void pfc_init_e3(void)
 				  | MOD_SEL1_VIN5_A
 				  | MOD_SEL1_ADGC_A
 				  | MOD_SEL1_SSI9_A);
+#endif	// RZG_EK874
 
 	/* initialize peripheral function select */
+#if RZG_EK874
+	pfc_reg_write(PFC_IPSR0, IPSR_28_FUNC(2)	/* HRX4_B */
+			       | IPSR_24_FUNC(2)	/* HTX4_B */
+			       | IPSR_20_FUNC(0)	/* QSPI1_SPCLK */
+			       | IPSR_16_FUNC(0)	/* QSPI0_IO3 */
+			       | IPSR_12_FUNC(0)	/* QSPI0_IO2 */
+			       | IPSR_8_FUNC(0)		/* QSPI0_MISO/IO1 */
+			       | IPSR_4_FUNC(0)		/* QSPI0_MOSI/IO0 */
+			       | IPSR_0_FUNC(0));	/* QSPI0_SPCLK */
+	pfc_reg_write(PFC_IPSR1, IPSR_28_FUNC(0)	/* AVB_RD2 */
+			       | IPSR_24_FUNC(0)	/* AVB_RD1 */
+			       | IPSR_20_FUNC(0)	/* AVB_RD0 */
+			       | IPSR_16_FUNC(0)	/* RPC_RESET# */
+			       | IPSR_12_FUNC(0)	/* RPC_INT# */
+			       | IPSR_8_FUNC(0)		/* QSPI1_SSL */
+			       | IPSR_4_FUNC(2)		/* HRX3_C */
+			       | IPSR_0_FUNC(2));	/* HTX3_C */
+	pfc_reg_write(PFC_IPSR2, IPSR_28_FUNC(1)	/* IRQ0 */
+			       | IPSR_24_FUNC(0)
+			       | IPSR_20_FUNC(0)
+			       | IPSR_16_FUNC(2)	/* AVB_LINK */
+			       | IPSR_12_FUNC(0)
+			       | IPSR_8_FUNC(0)		/* AVB_MDC */
+			       | IPSR_4_FUNC(0)		/* AVB_MDIO */
+			       | IPSR_0_FUNC(0));	/* AVB_TXCREFCLK */
+	pfc_reg_write(PFC_IPSR3, IPSR_28_FUNC(5)	/* DU_HSYNC */
+			       | IPSR_24_FUNC(0)
+			       | IPSR_20_FUNC(0)
+			       | IPSR_16_FUNC(0)
+			       | IPSR_12_FUNC(5)	/* DU_DG4 */
+			       | IPSR_8_FUNC(5)		/* DU_DOTCLKOUT0 */
+			       | IPSR_4_FUNC(5)		/* DU_DISP */
+			       | IPSR_0_FUNC(1));	/* IRQ1 */
+	pfc_reg_write(PFC_IPSR4, IPSR_28_FUNC(5)	/* DU_DB5 */
+			       | IPSR_24_FUNC(5)	/* DU_DB4 */
+			       | IPSR_20_FUNC(5)	/* DU_DB3 */
+			       | IPSR_16_FUNC(5)	/* DU_DB2 */
+			       | IPSR_12_FUNC(5)	/* DU_DG6 */
+			       | IPSR_8_FUNC(5)		/* DU_VSYNC */
+			       | IPSR_4_FUNC(5)		/* DU_DG5 */
+			       | IPSR_0_FUNC(5));	/* DU_DG7 */
+	pfc_reg_write(PFC_IPSR5, IPSR_28_FUNC(5)	/* DU_DR3 */
+			       | IPSR_24_FUNC(5)	/* DU_DB7 */
+			       | IPSR_20_FUNC(5)	/* DU_DR2 */
+			       | IPSR_16_FUNC(5)	/* DU_DR1 */
+			       | IPSR_12_FUNC(5)	/* DU_DR0 */
+			       | IPSR_8_FUNC(5)		/* DU_DB1 */
+			       | IPSR_4_FUNC(5)		/* DU_DB0 */
+			       | IPSR_0_FUNC(5));	/* DU_DB6 */
+	pfc_reg_write(PFC_IPSR6, IPSR_28_FUNC(5)	/* DU_DG1 */
+			       | IPSR_24_FUNC(5)	/* DU_DG0 */
+			       | IPSR_20_FUNC(5)	/* DU_DR7 */
+			       | IPSR_16_FUNC(1)	/* CANFD1_RX */
+			       | IPSR_12_FUNC(5)	/* DU_DR6 */
+			       | IPSR_8_FUNC(5)		/* DU_DR5 */
+			       | IPSR_4_FUNC(1)		/* CANFD1_TX */
+			       | IPSR_0_FUNC(5));	/* DU_DR4 */
+	pfc_reg_write(PFC_IPSR7, IPSR_28_FUNC(0)	/* SD0_CLK */
+			       | IPSR_24_FUNC(0)
+			       | IPSR_20_FUNC(5)	/* DU_DOTCLKIN0 */
+			       | IPSR_16_FUNC(5)	/* DU_DG3 */
+			       | IPSR_12_FUNC(1)	/* CAN_CLK */
+			       | IPSR_8_FUNC(1)		/* CANFD0_RX */
+			       | IPSR_4_FUNC(1)		/* CANFD0_TX */
+			       | IPSR_0_FUNC(5));	/* DU_DG2 */
+	pfc_reg_write(PFC_IPSR8, IPSR_28_FUNC(0)	/* SD1_DAT0 */
+			       | IPSR_24_FUNC(0)	/* SD1_CMD */
+			       | IPSR_20_FUNC(0)	/* SD1_CLK */
+			       | IPSR_16_FUNC(0)	/* SD0_DAT3 */
+			       | IPSR_12_FUNC(0)	/* SD0_DAT2 */
+			       | IPSR_8_FUNC(0)		/* SD0_DAT1 */
+			       | IPSR_4_FUNC(0)		/* SD0_DAT0 */
+			       | IPSR_0_FUNC(0));	/* SD0_CMD */
+	pfc_reg_write(PFC_IPSR9, IPSR_28_FUNC(0)	/* SD3_DAT2 */
+			       | IPSR_24_FUNC(0)	/* SD3_DAT1 */
+			       | IPSR_20_FUNC(0)	/* SD3_DAT0 */
+			       | IPSR_16_FUNC(0)	/* SD3_CMD */
+			       | IPSR_12_FUNC(0)	/* SD3_CLK */
+			       | IPSR_8_FUNC(0)		/* SD1_DAT3 */
+			       | IPSR_4_FUNC(0)		/* SD1_DAT2 */
+			       | IPSR_0_FUNC(0));	/* SD1_DAT1 */
+	pfc_reg_write(PFC_IPSR10, IPSR_24_FUNC(0)	/* SD0_CD */
+				| IPSR_20_FUNC(0)	/* SD3_DS */
+				| IPSR_16_FUNC(0)	/* SD3_DAT7 */
+				| IPSR_12_FUNC(0)	/* SD3_DAT6 */
+				| IPSR_8_FUNC(0)	/* SD3_DAT5 */
+				| IPSR_4_FUNC(0)	/* SD3_DAT4 */
+				| IPSR_0_FUNC(0));	/* SD3_DAT3 */
+	pfc_reg_write(PFC_IPSR11, IPSR_28_FUNC(0)
+				| IPSR_24_FUNC(8)	/* USB0_ID */
+				| IPSR_20_FUNC(2)	/* AUDIO_CLKOUT1_A */
+				| IPSR_16_FUNC(0)	/* CTS0#_A */ /* FIXME */
+				| IPSR_12_FUNC(0)
+				| IPSR_8_FUNC(0)
+				| IPSR_4_FUNC(0)	/* SD1_WP */
+				| IPSR_0_FUNC(0));	/* SD1_CD */
+	pfc_reg_write(PFC_IPSR12, IPSR_28_FUNC(0)
+				| IPSR_24_FUNC(0)
+				| IPSR_20_FUNC(0)
+				| IPSR_16_FUNC(0)
+				| IPSR_12_FUNC(0)	/* RX2_A */
+				| IPSR_8_FUNC(0)	/* TX2_A */
+				| IPSR_4_FUNC(0)	/* SCK2_A */ /* FIXME */
+				| IPSR_0_FUNC(0));
+	pfc_reg_write(PFC_IPSR13, IPSR_28_FUNC(0)
+				| IPSR_24_FUNC(0)
+				| IPSR_20_FUNC(0)
+				| IPSR_16_FUNC(4)	/* SDA1_B */
+				| IPSR_12_FUNC(4)	/* SCL1_B */
+				| IPSR_8_FUNC(0)	/* SSI_SDATA9 */ /* FIXME */
+				| IPSR_4_FUNC(1)	/* HTX2_A */
+				| IPSR_0_FUNC(1));	/* HRX2_A */
+	pfc_reg_write(PFC_IPSR14, IPSR_28_FUNC(0)	/* SSI_SCK5 */ /* FIXME */
+				| IPSR_24_FUNC(0)	/* SSI_SDATA4 */
+				| IPSR_20_FUNC(0)	/* SSI_SDATA3 */
+				| IPSR_16_FUNC(0)	/* SSI_WS349 */
+				| IPSR_12_FUNC(0)	/* SSI_SCK349 */
+				| IPSR_8_FUNC(0)
+				| IPSR_4_FUNC(0)	/* SSI_SDATA1 */
+				| IPSR_0_FUNC(0));	/* SSI_SDATA0 */
+	pfc_reg_write(PFC_IPSR15, IPSR_28_FUNC(0)	/* USB30_OVC */
+				| IPSR_24_FUNC(0)	/* USB30_PWEN */
+				| IPSR_20_FUNC(0)	/* AUDIO_CLKA */
+				| IPSR_16_FUNC(1)	/* HRTS2#_A */
+				| IPSR_12_FUNC(1)	/* HCTS2#_A */
+				| IPSR_8_FUNC(3)	/* TPU0TO1 */
+				| IPSR_4_FUNC(3)	/* TPU0TO0 */
+				| IPSR_0_FUNC(0));	/* SSI_WS5 */ /* FIXME */
+#else	// RZG_EK874
 	pfc_reg_write(PFC_IPSR0, IPSR_28_FUNC(0)	/* QSPI1_MISO/IO1 */
 			       | IPSR_24_FUNC(0)	/* QSPI1_MOSI/IO0 */
 			       | IPSR_20_FUNC(0)	/* QSPI1_SPCLK */
@@ -640,8 +791,116 @@ void pfc_init_e3(void)
 				| IPSR_8_FUNC(0)
 				| IPSR_4_FUNC(0)
 				| IPSR_0_FUNC(3));	/* USB0_OVC_B */
+#endif	// RZG_EK874
 
 	/* initialize GPIO/perihperal function select */
+#if RZG_EK874
+	pfc_reg_write(PFC_GPSR0, GPSR0_SCL4
+			       | GPSR0_D15
+			       | GPSR0_D14
+			       | GPSR0_D13
+			       | GPSR0_D12
+			       | GPSR0_D11
+			       | GPSR0_D10
+			       | GPSR0_D9
+			       | GPSR0_D8
+			       | GPSR0_D7
+			       | GPSR0_D6
+			       | GPSR0_D5
+			       | GPSR0_D4 /* for EK874 */
+			       | GPSR0_D3
+			       | GPSR0_D2
+			       | GPSR0_D1
+			       | GPSR0_D0);
+	pfc_reg_write(PFC_GPSR1, GPSR1_WE0
+			       | GPSR1_CS0
+			       | GPSR1_A19
+			       | GPSR1_A18
+			       | GPSR1_A17
+			       | GPSR1_A16
+			       | GPSR1_A15
+			       | GPSR1_A14
+			       | GPSR1_A13
+			       | GPSR1_A12
+			       | GPSR1_A11
+			       | GPSR1_A10
+			       | GPSR1_A9
+			       | GPSR1_A8
+			       | GPSR1_A4
+			       | GPSR1_A3
+			       | GPSR1_A2
+			       | GPSR1_A1
+			       | GPSR1_A0);
+	pfc_reg_write(PFC_GPSR2, GPSR2_BIT27_REVERCED
+		               | GPSR2_BIT26_REVERCED
+			       | GPSR2_AVB_PHY_INT
+			       | GPSR2_AVB_TXCREFCLK
+			       | GPSR2_AVB_RD3
+			       | GPSR2_AVB_RD2
+			       | GPSR2_AVB_RD1
+			       | GPSR2_AVB_RD0
+			       | GPSR2_AVB_RXC
+			       | GPSR2_AVB_RX_CTL
+			       | GPSR2_RPC_RESET
+			       | GPSR2_RPC_RPC_INT
+			       | GPSR2_QSPI1_IO3
+			       | GPSR2_QSPI1_IO2
+			       | GPSR2_QSPI1_MISO_IO1
+			       | GPSR2_QSPI1_MOSI_IO0
+			       | GPSR2_QSPI0_SSL
+			       | GPSR2_QSPI0_IO3
+			       | GPSR2_QSPI0_IO2
+			       | GPSR2_QSPI0_MISO_IO1
+			       | GPSR2_QSPI0_MOSI_IO0
+			       | GPSR2_QSPI0_SPCLK);
+	pfc_reg_write(PFC_GPSR3, GPSR3_SD0_CD
+			       | GPSR3_SD1_DAT3
+			       | GPSR3_SD1_DAT2
+			       | GPSR3_SD1_DAT1
+			       | GPSR3_SD1_DAT0
+			       | GPSR3_SD1_CMD
+			       | GPSR3_SD1_CLK
+			       | GPSR3_SD0_DAT3
+			       | GPSR3_SD0_DAT2
+			       | GPSR3_SD0_DAT1
+			       | GPSR3_SD0_DAT0
+			       | GPSR3_SD0_CMD
+			       | GPSR3_SD0_CLK);
+	pfc_reg_write(PFC_GPSR4, GPSR4_SD3_DAT3
+			       | GPSR4_SD3_DAT2
+			       | GPSR4_SD3_DAT1
+			       | GPSR4_SD3_DAT0
+			       | GPSR4_SD3_CMD
+			       | GPSR4_SD3_CLK);
+	pfc_reg_write(PFC_GPSR5, GPSR5_MLB_SIG
+			       | GPSR5_MLB_CLK
+			       | GPSR5_SSI_SDATA9
+		               | GPSR5_MSIOF0_SS2
+			       | GPSR5_MSIOF0_SS1
+			       | GPSR5_MSIOF0_SYNC
+			       | GPSR5_MSIOF0_TXD
+			       | GPSR5_MSIOF0_RXD
+			       | GPSR5_MSIOF0_SCK
+			       | GPSR5_RX2_A
+			       | GPSR5_TX2_A
+			       | GPSR5_RTS0_A
+			       | GPSR5_SCK0_A);
+	pfc_reg_write(PFC_GPSR6, GPSR6_USB30_PWEN
+			       | GPSR6_SSI_SDATA6
+			       | GPSR6_SSI_WS6
+			       | GPSR6_SSI_SCK6
+			       | GPSR6_SSI_SDATA5
+			       | GPSR6_SSI_SCK5
+			       | GPSR6_SSI_SDATA4
+			       | GPSR6_USB30_OVC
+			       | GPSR6_AUDIO_CLKA
+			       | GPSR6_SSI_SDATA3
+			       | GPSR6_SSI_WS349
+			       | GPSR6_SSI_SCK349
+			       | GPSR6_SSI_SDATA0
+			       | GPSR6_SSI_WS01239
+			       | GPSR6_SSI_SCK01239);
+#else	// RZG_EK874
 	pfc_reg_write(PFC_GPSR0, GPSR0_SCL4
 			       | GPSR0_D15
 			       | GPSR0_D11
@@ -749,8 +1008,10 @@ void pfc_init_e3(void)
 			       | GPSR6_SSI_SDATA0
 			       | GPSR6_SSI_WS01239
 			       | GPSR6_SSI_SCK01239);
+#endif	// RZG_EK874
 
 	/* initialize POC control */
+#if RZG_EK874
 	reg = mmio_read_32(PFC_POCCTRL0);
 	reg = ((reg & POCCTRL0_MASK) | POC_SD1_DAT3_33V
 				     | POC_SD1_DAT2_33V
@@ -768,22 +1029,59 @@ void pfc_init_e3(void)
 	reg = mmio_read_32(PFC_POCCTRL2);
 	reg = (reg & POCCTRL2_MASK);
 	pfc_reg_write(PFC_POCCTRL2, reg);
+#else	// RZG_EK874
+	reg = mmio_read_32(PFC_POCCTRL0);
+	reg = ((reg & POCCTRL0_MASK) | POC_SD1_DAT3_33V
+				     | POC_SD1_DAT2_33V
+				     | POC_SD1_DAT1_33V
+				     | POC_SD1_DAT0_33V
+				     | POC_SD1_CMD_33V
+				     | POC_SD1_CLK_33V
+				     | POC_SD0_DAT3_33V
+				     | POC_SD0_DAT2_33V
+				     | POC_SD0_DAT1_33V
+				     | POC_SD0_DAT0_33V
+				     | POC_SD0_CMD_33V
+				     | POC_SD0_CLK_33V);
+	pfc_reg_write(PFC_POCCTRL0, reg);
+	reg = mmio_read_32(PFC_POCCTRL2);
+	reg = (reg & POCCTRL2_MASK);
+	pfc_reg_write(PFC_POCCTRL2, reg);
+#endif	// RZG_EK874
 
 	/* initialize LSI pin pull-up/down control */
+#if RZG_EK874
+	pfc_reg_write(PFC_PUD0, 0x00080000U);
+	pfc_reg_write(PFC_PUD1, 0xCE398464U);
+	pfc_reg_write(PFC_PUD2, 0xA4C380F4U);
+	pfc_reg_write(PFC_PUD3, 0x0000079FU);
+	pfc_reg_write(PFC_PUD4, 0xFFF0FFFFU);
+	pfc_reg_write(PFC_PUD5, 0x40000000U);
+#else	// RZG_EK874
 	pfc_reg_write(PFC_PUD0, 0xFDF80000U);
 	pfc_reg_write(PFC_PUD1, 0xCE298464U);
 	pfc_reg_write(PFC_PUD2, 0xA4C380F4U);
 	pfc_reg_write(PFC_PUD3, 0x0000079FU);
 	pfc_reg_write(PFC_PUD4, 0xFFF0FFFFU);
 	pfc_reg_write(PFC_PUD5, 0x40000000U);
+#endif	// RZG_EK874
 
 	/* initialize LSI pin pull-enable register */
+#if RZG_EK874
+	pfc_reg_write(PFC_PUEN0, 0x00000000U);
+	pfc_reg_write(PFC_PUEN1, 0x00300000U);
+	pfc_reg_write(PFC_PUEN2, 0x00400074U);
+	pfc_reg_write(PFC_PUEN3, 0x00000000U);
+	pfc_reg_write(PFC_PUEN4, 0x07900600U);
+	pfc_reg_write(PFC_PUEN5, 0x00000000U);
+#else	// RZG_EK874
 	pfc_reg_write(PFC_PUEN0, 0xFFF00000U);
 	pfc_reg_write(PFC_PUEN1, 0x00000000U);
 	pfc_reg_write(PFC_PUEN2, 0x00000004U);
 	pfc_reg_write(PFC_PUEN3, 0x00000000U);
 	pfc_reg_write(PFC_PUEN4, 0x07800010U);
 	pfc_reg_write(PFC_PUEN5, 0x00000000U);
+#endif	// RZG_EK874
 
 	/* initialize positive/negative logic select */
 	mmio_write_32(GPIO_POSNEG0, 0x00000000U);
@@ -795,6 +1093,15 @@ void pfc_init_e3(void)
 	mmio_write_32(GPIO_POSNEG6, 0x00000000U);
 
 	/* initialize general IO/interrupt switching */
+#if RZG_EK874
+	mmio_write_32(GPIO_IOINTSEL0, 0x00000000U);
+	mmio_write_32(GPIO_IOINTSEL1, 0x00000000U);
+	mmio_write_32(GPIO_IOINTSEL2, 0x00000000U);
+	mmio_write_32(GPIO_IOINTSEL3, 0x00000000U);
+	mmio_write_32(GPIO_IOINTSEL4, 0x00000000U);
+	mmio_write_32(GPIO_IOINTSEL5, 0x00000000U);
+	mmio_write_32(GPIO_IOINTSEL6, 0x00000000U);
+#else	// RZG_EK874
 	mmio_write_32(GPIO_IOINTSEL0, 0x00020000U);
 	mmio_write_32(GPIO_IOINTSEL1, 0x00000000U);
 	mmio_write_32(GPIO_IOINTSEL2, 0x00000000U);
@@ -802,16 +1109,36 @@ void pfc_init_e3(void)
 	mmio_write_32(GPIO_IOINTSEL4, 0x00000000U);
 	mmio_write_32(GPIO_IOINTSEL5, 0x00000000U);
 	mmio_write_32(GPIO_IOINTSEL6, 0x00000000U);
+#endif	// RZG_EK874
 
 	/* initialize general output register */
+#if RZG_EK874
+	mmio_write_32(GPIO_OUTDT0, 0x00000000U);
+	mmio_write_32(GPIO_OUTDT1, 0x00000000U);
+	mmio_write_32(GPIO_OUTDT2, 0x00000000U);
+	mmio_write_32(GPIO_OUTDT3, 0x00006000U);
+	mmio_write_32(GPIO_OUTDT5, 0x00000000U);
+	mmio_write_32(GPIO_OUTDT6, 0x00000000U);
+#else	// RZG_EK874
 	mmio_write_32(GPIO_OUTDT0, 0x00000010U);
 	mmio_write_32(GPIO_OUTDT1, 0x00100000U);
 	mmio_write_32(GPIO_OUTDT2, 0x00000000U);
 	mmio_write_32(GPIO_OUTDT3, 0x00008000U);
 	mmio_write_32(GPIO_OUTDT5, 0x00060000U);
 	mmio_write_32(GPIO_OUTDT6, 0x00000000U);
+#endif	// RZG_EK874
 
 	/* initialize general input/output switching */
+#if RZG_EK874
+	/* initialize general input/output switching */
+	mmio_write_32(GPIO_INOUTSEL0, 0x00020000U);
+	mmio_write_32(GPIO_INOUTSEL1, 0x00100000U);
+	mmio_write_32(GPIO_INOUTSEL2, 0x03000000U);
+	mmio_write_32(GPIO_INOUTSEL3, 0x0000E000U);
+	mmio_write_32(GPIO_INOUTSEL4, 0x00000440U);
+	mmio_write_32(GPIO_INOUTSEL5, 0x00080000U);
+	mmio_write_32(GPIO_INOUTSEL6, 0x00000010U);
+#else	// RZG_EK874
 	mmio_write_32(GPIO_INOUTSEL0, 0x00000010U);
 	mmio_write_32(GPIO_INOUTSEL1, 0x00100020U);
 	mmio_write_32(GPIO_INOUTSEL2, 0x03000000U);
@@ -819,4 +1146,5 @@ void pfc_init_e3(void)
 	mmio_write_32(GPIO_INOUTSEL4, 0x00000000U);
 	mmio_write_32(GPIO_INOUTSEL5, 0x00060000U);
 	mmio_write_32(GPIO_INOUTSEL6, 0x00004000U);
+#endif	// RZG_EK874
 }
diff --git a/plat/renesas/rcar/platform.mk b/plat/renesas/rcar/platform.mk
index a8b4672..cbdca87 100644
--- a/plat/renesas/rcar/platform.mk
+++ b/plat/renesas/rcar/platform.mk
@@ -211,6 +211,23 @@ else
       endif
       $(eval $(call add_define,RCAR_LSI_CUT))
     endif
+  else ifeq (${LSI},G2E)
+    RCAR_LSI:=${RCAR_E3}
+    ifndef LSI_CUT
+      # enable compatible function.
+      RCAR_LSI_CUT_COMPAT := 1
+      $(eval $(call add_define,RCAR_LSI_CUT_COMPAT))
+    else
+      # disable compatible function.
+      ifeq (${LSI_CUT},10)
+        RCAR_LSI_CUT:=0
+      else ifeq (${LSI_CUT},11)
+        RCAR_LSI_CUT:=1
+      else
+        $(error "Error: ${LSI_CUT} is not supported.")
+      endif
+      $(eval $(call add_define,RCAR_LSI_CUT))
+    endif
   else
     $(error "Error: ${LSI} is not supported.")
   endif
@@ -351,6 +368,12 @@ RCAR_SYSTEM_RESET_KEEPON_DDR := 0
 endif
 $(eval $(call add_define,RCAR_SYSTEM_RESET_KEEPON_DDR))
 
+#Process EK874 flag
+ifndef RZG_EK874
+RZG_EK874 := 0
+endif
+$(eval $(call add_define,RZG_EK874))
+
 # RCAR_SYSTEM_RESET_KEEPON_DDR requires power control of PMIC etc.
 # When executing SYSTEM_SUSPEND other than Salvator-X, Salvator-XS and Ebisu,
 # processing equivalent to that implemented in PMIC_ROHM_BD9571 is necessary.
diff --git a/tools/dummy_create/makefile b/tools/dummy_create/makefile
index 9093111..d380162 100644
--- a/tools/dummy_create/makefile
+++ b/tools/dummy_create/makefile
@@ -55,6 +55,12 @@ endif
 endif
 $(eval $(call add_define,RCAR_SA6_TYPE))
 
+#Process EK874 flag
+ifndef RZG_EK874
+RZG_EK874 := 0
+endif
+$(eval $(call add_define,RZG_EK874))
+
 ###################################################
 
 #c compiler
diff --git a/tools/dummy_create/sa6.c b/tools/dummy_create/sa6.c
index 3a74aa5..e6dafc1 100644
--- a/tools/dummy_create/sa6.c
+++ b/tools/dummy_create/sa6.c
@@ -22,7 +22,11 @@
 /* Reserved */
 #define RCAR_BL32_PARTITION		(0x00000000U)
 /* Source address on flash for BL33 */
+#if (RZG_EK874)
+#define RCAR_BL33SRC_ADDRESS		(0x00300000U)
+#else	// RZG_EK874
 #define RCAR_BL33SRC_ADDRESS		(0x00640000U)
+#endif	// RZG_EK874
 /* Reserved */
 #define RCAR_BL33_PARTITION		(0x00000000U)
 #define RCAR_BL332SRC_ADDRESS		(0x00000000U)
