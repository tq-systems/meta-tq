From 2b167e6dd5e53bb2c2be688440d3fa811028ee39 Mon Sep 17 00:00:00 2001
From: hienhuynh <hien.huynh.px@renesas.com>
Date: Thu, 2 Jul 2020 19:20:12 +0700
Subject: [PATCH 10/10] plat: renesas: rzg: bl2_fusa: Add ECC support for
 RZ/G2H

This patch will add ecc support for RZ/G2H for both single mode and dual
mode

Signed-off-by: Huynh Thanh Hung <hung.huynh.wz@renesas.com>
Signed-off-by: hienhuynh <hien.huynh.px@renesas.com>
---
 plat/renesas/rzg/bl2_fusa.c | 111 +++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 109 insertions(+), 2 deletions(-)

diff --git a/plat/renesas/rzg/bl2_fusa.c b/plat/renesas/rzg/bl2_fusa.c
index d898b44..8547c68 100644
--- a/plat/renesas/rzg/bl2_fusa.c
+++ b/plat/renesas/rzg/bl2_fusa.c
@@ -53,6 +53,23 @@
 #define	HHOPE_G2M_ECCAREA		0x608000000
 #define	HHOPE_G2M_ECCAREA_TOTAL		((1920)*1024*1024)
 
+#if (RZG_DRAM_ECC_FULL == 1)
+#define	HHOPE_G2H_FUSAAREA1		0x408000000
+#define	HHOPE_G2H_FUSAAREA1_TOTAL	((1920)*1024*1024)
+#define	HHOPE_G2H_ECCAREA1		0x608000000
+#define	HHOPE_G2H_ECCAREA1_TOTAL	((1920)*1024*1024)
+#else
+#define	HHOPE_G2H_FUSAAREA1		0x408000000
+#define	HHOPE_G2H_FUSAAREA1_TOTAL	((960)*1024*1024)
+#define	HHOPE_G2H_ECCAREA1		0x444000000
+#define	HHOPE_G2H_ECCAREA1_TOTAL	((960)*1024*1024)
+
+#define	HHOPE_G2H_FUSAAREA2		0x600000000
+#define	HHOPE_G2H_FUSAAREA2_TOTAL	((1024)*1024*1024)
+#define	HHOPE_G2H_ECCAREA2		0x640000000
+#define	HHOPE_G2H_ECCAREA2_TOTAL	((1024)*1024*1024)
+#endif
+
 struct rzg2_ecc_conf {
 	uint32_t fusaareacr;
 	uint32_t eccareacr;
@@ -117,7 +134,37 @@ static const struct rzg2_ecc_conf rzg2_hihope_rzg2n_conf[] = {
 };
 #endif
 
-#if (RZG_HIHOPE_RZG2M == 1)
+#if (RZG_DRAM_ECC == 1 && RZG_HIHOPE_RZG2H == 1)
+static const struct rzg2_ecc_conf rzg2_hihope_rzg2h_conf[] = {
+#if (RZG_DRAM_ECC_FULL == 2)   // ECC Full mode single channel
+	{ FUSAAREACR(1, 6, 0x408000000), ECCAREACR(0, 0x444000000) }, /* 64+64 MB */
+	{ FUSAAREACR(1, 7, 0x40C000000), ECCAREACR(0, 0x448000000) }, /* 128+128 MB */
+	{ FUSAAREACR(1, 8, 0x414000000), ECCAREACR(0, 0x450000000) }, /* 256+256 MB */
+	{ FUSAAREACR(1, 9, 0x424000000), ECCAREACR(0, 0x460000000) }, /* 512+512 MB */
+	{ FUSAAREACR(1, 9, 0x600000000), ECCAREACR(0, 0x640000000) }, /* 512+512 MB */
+	{ FUSAAREACR(1, 9, 0x620000000), ECCAREACR(0, 0x660000000) }, /* 512+512 MB */
+#else
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+#endif //(RZG_DRAM_ECC_FULL == 2)
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+};
+#endif
+
+#if ((RZG_HIHOPE_RZG2M == 1 || RZG_HIHOPE_RZG2H == 1) && RZG_DRAM_ECC == 1)
 #if (RZG_DRAM_ECC_FULL == 1) // ECC Full mode dual channel
 static const uint32_t fusacr = EFUSASEL(0xF0) | DFUSASEL(0xFE)| SFUSASEL(0);
 static const uint32_t adsplcr0 = ADRMODE(0) | SPLITSEL(1) | AREA(0x1C) | SWP(0);
@@ -131,7 +178,7 @@ static const uint32_t adsplcr1 = 0;
 static const uint32_t adsplcr2 = 0;
 static const uint32_t adsplcr3 = 0;
 #endif //(RZG_DRAM_ECC_FULL == 1)
-#endif //(RZG_HIHOPE_RZG2M == 1)
+#endif //((RZG_HIHOPE_RZG2M == 1 || RZG_HIHOPE_RZG2H == 1) && RZG_DRAM_ECC == 1)
 
 #if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL != 0))
 /* Write zero-valued octa-byte words */
@@ -247,6 +294,64 @@ static void bl2_enable_ecc_hihope_rzg2m(void)
 }
 #endif
 
+#if (RZG_DRAM_ECC == 1 && RZG_HIHOPE_RZG2H == 1)
+void bl2_enable_ecc_hihope_rzg2h(void)
+{
+	const struct rzg2_ecc_conf *conf;
+	int n;
+	int nb_of_conf;
+
+	conf = rzg2_hihope_rzg2h_conf;
+	nb_of_conf = ARRAY_SIZE(rzg2_hihope_rzg2h_conf);
+
+#if (FUSA_DRAM_CLEAR == 1)
+	/* Clear DRAM ECC Area (for check) */
+#if (RZG_DRAM_ECC_FULL != 0)
+	NOTICE("BL2: Clearing ECC area from %lx\n", HHOPE_G2H_ECCAREA1);
+	bzero64(HHOPE_G2H_ECCAREA1, (uint64_t)HHOPE_G2H_ECCAREA1_TOTAL);
+#endif //(RZG_DRAM_ECC_FULL != 0)
+#if (RZG_DRAM_ECC_FULL == 2)
+	NOTICE("BL2: Clearing ECC area from %lx\n", HHOPE_G2H_ECCAREA2);
+	bzero64(HHOPE_G2H_ECCAREA2, (uint64_t)HHOPE_G2H_ECCAREA2_TOTAL);
+#endif //(RZG_DRAM_ECC_FULL == 2)
+#endif //((FUSA_DRAM_CLEAR == 1)
+	mmio_write_32((uintptr_t)((uint32_t *)ADSPLCR0), adsplcr0);
+	mmio_write_32((uintptr_t)((uint32_t *)ADSPLCR1), adsplcr1);
+	mmio_write_32((uintptr_t)((uint32_t *)ADSPLCR2), adsplcr2);
+	mmio_write_32((uintptr_t)((uint32_t *)ADSPLCR3), adsplcr3);
+	mmio_write_32((uintptr_t)((uint32_t *)FUSACR),fusacr);
+
+	NOTICE("BL2: DRAM ECC Configured:\n");
+	NOTICE("     ADSPLCR0=0x%x\n",adsplcr0);
+	NOTICE("     ADSPLCR1=0x%x\n",adsplcr1);
+	NOTICE("     ADSPLCR2=0x%x\n",adsplcr2);
+	NOTICE("     ADSPLCR3=0x%x\n",adsplcr3);
+	NOTICE("     FUSACR=0x%x\n",fusacr);
+	for (n = 0; n < nb_of_conf; n++, conf++) {
+		mmio_write_32((uintptr_t)((uint32_t *)DFUSAAREACR + n),
+				conf->fusaareacr);
+		mmio_write_32((uintptr_t)((uint32_t *)DECCAREACR + n),
+				conf->eccareacr);
+		if(conf->fusaareacr & ((uint32_t)1 << 31))
+			NOTICE("BL2: DRAM ECC area=%d, FuSa=0x%x ECC=0x%x,\
+				size=%d MB\n",
+				n, conf->fusaareacr, conf->eccareacr,
+				1 << ((conf->fusaareacr >> 24) & 0xf));
+       }
+#if (FUSA_DRAM_CLEAR == 1)
+	/* Clear DRAM data area to initialize ECC area */
+#if (RZG_DRAM_ECC_FULL != 0)
+	NOTICE("BL2: Clearing DATA area from %lx\n", HHOPE_G2H_FUSAAREA1);
+	bzero64(HHOPE_G2H_FUSAAREA1, (uint64_t)HHOPE_G2H_FUSAAREA1_TOTAL);
+#endif //(RZG_DRAM_ECC_FULL != 0)
+#if (RZG_DRAM_ECC_FULL == 2)
+	NOTICE("BL2: Clearing DATA area from %lx\n", HHOPE_G2H_FUSAAREA2);
+	bzero64(HHOPE_G2H_FUSAAREA2, (uint64_t)HHOPE_G2H_FUSAAREA2_TOTAL);
+#endif //(RZG_DRAM_ECC_FULL == 2)
+#endif //(FUSA_DRAM_CLEAR == 1)
+}
+#endif
+
 void bl2_ecc_init(void)
 {
 #if (RZG_DRAM_ECC == 1)
@@ -257,6 +362,8 @@ void bl2_ecc_init(void)
 	bl2_enable_ecc_hihope_rzg2m();
 #elif (RZG_HIHOPE_RZG2N == 1)
 	bl2_enable_ecc_hihope_rzg2n();
+#elif (RZG_HIHOPE_RZG2H == 1)
+	bl2_enable_ecc_hihope_rzg2h();
 	return;
 #else
 #error "Don't have ECC initialize routine(unknown)."
-- 
2.7.4

