From 76057f0295f781b47a23d76a31dbc5dca6202471 Mon Sep 17 00:00:00 2001
From: Binh Nguyen <binh.nguyen.uw@renesas.com>
Date: Tue, 26 Nov 2019 14:07:10 +0700
Subject: [PATCH 2/4] plat: renesas: bl2_fusa: Add mem initialization b/f and
 a/f ECC enable

Initialize memory before and after enabling ECC:
  initialize ECC area -> enable ECC -> enable DATA area

Signed-off-by: Binh Nguyen <binh.nguyen.uw@renesas.com>
---
 plat/renesas/rcar/bl2_fusa.c | 58 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 58 insertions(+)

diff --git a/plat/renesas/rcar/bl2_fusa.c b/plat/renesas/rcar/bl2_fusa.c
index 74d1ab4..9bf4b99 100644
--- a/plat/renesas/rcar/bl2_fusa.c
+++ b/plat/renesas/rcar/bl2_fusa.c
@@ -10,6 +10,8 @@
 #include <debug.h>
 #include <mmio.h>
 
+#define	FUSA_DRAM_CLEAR		1
+
 #define	DFUSAAREACR		0xE6785000	/* DRAM FuSa Area Conf */
 #define	DECCAREACR		0xE6785040	/* DRAM ECC Area Conf */
 #define	NUM_DAREA		16
@@ -38,6 +40,19 @@
 #define	ARRAY_SIZE(a)		(sizeof(a) / sizeof(a[0]))
 #endif
 
+#define	EK874_FUSAAREA			0x408000000
+#define	EK874_FUSAAREA_TOTAL		((128+256+256+256+64)*1024*1024)
+#define	EK874_ECCAREA			0x444000000
+#define	EK874_ECCAREA_TOTAL		((128+256+256+256+64)*1024*1024)
+#define	HHOPE_G2N_FUSAAREA		0x408000000
+#define	HHOPE_G2N_FUSAAREA_TOTAL	((128+256+512+512+512+64)*1024*1024)
+#define	HHOPE_G2N_ECCAREA		0x484000000
+#define	HHOPE_G2N_ECCAREA_TOTAL		((128+256+512+512+512+64)*1024*1024)
+#define	HHOPE_G2M_FUSAAREA		0x408000000
+#define	HHOPE_G2M_FUSAAREA_TOTAL	((1920)*1024*1024)
+#define	HHOPE_G2M_ECCAREA		0x608000000
+#define	HHOPE_G2M_ECCAREA_TOTAL		((1920)*1024*1024)
+
 static const struct rzg2_ecc_conf {
 	uint32_t fusaareacr;
 	uint32_t eccareacr;
@@ -110,6 +125,19 @@ static const uint32_t adsplcr2 = 0;
 static const uint32_t adsplcr3 = 0;
 #endif //(RZG_DRAM_ECC_FULL == 1)
 
+#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+/* Write zero-valued octa-byte words */
+static void bzero64(uintptr_t start, uint64_t size)
+{
+	/* start should be aligned on word boundary, size should be multiple of 8 */
+	volatile uint64_t *ptr = (volatile uint64_t *)start;
+	volatile uint64_t *end = ptr + (size / sizeof(uint64_t));
+
+	while (ptr < end)
+		*ptr++ = 0;
+}
+#endif //((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+
 /* Setup DRAM ECC configuration registers */
 void bl2_enable_ecc_ek874(void)
 {
@@ -120,6 +148,11 @@ void bl2_enable_ecc_ek874(void)
 	conf = rzg2_ek874_conf;
 	nb_of_conf = ARRAY_SIZE(rzg2_ek874_conf);
 
+#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+	/* Clear DRAM ECC Area (for check) */
+	NOTICE("BL2: Clearing ECC area from %lx\n", EK874_ECCAREA);
+	bzero64(EK874_ECCAREA, (uint64_t)EK874_ECCAREA_TOTAL);
+#endif //((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
 	for (n = 0; n < nb_of_conf; n++, conf++) {
 		mmio_write_32((uintptr_t)((uint32_t *)DFUSAAREACR + n), conf->fusaareacr);
 		mmio_write_32((uintptr_t)((uint32_t *)DECCAREACR + n), conf->eccareacr);
@@ -129,6 +162,11 @@ void bl2_enable_ecc_ek874(void)
 					1 << ((conf->fusaareacr >> 24) & 0xf));
 
 	}
+#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+	/* Clear DRAM data area to initialize ECC area */
+	NOTICE("BL2: Clearing DATA area from %lx\n", EK874_FUSAAREA);
+	bzero64(EK874_FUSAAREA, (uint64_t)EK874_FUSAAREA_TOTAL);
+#endif //((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
 
 }
 
@@ -141,6 +179,11 @@ void bl2_enable_ecc_hihope_rzg2n(void)
 	conf = rzg2_hihope_rzg2n_conf;
 	nb_of_conf = ARRAY_SIZE(rzg2_hihope_rzg2n_conf);
 
+#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+	/* Clear DRAM ECC Area (for check) */
+	NOTICE("BL2: Clearing ECC area from %lx\n", HHOPE_G2N_ECCAREA);
+	bzero64(HHOPE_G2N_ECCAREA, (uint64_t)HHOPE_G2N_ECCAREA_TOTAL);
+#endif //((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
 	for (n = 0; n < nb_of_conf; n++, conf++) {
 		mmio_write_32((uintptr_t)((uint32_t *)DFUSAAREACR + n), conf->fusaareacr);
 		mmio_write_32((uintptr_t)((uint32_t *)DECCAREACR + n), conf->eccareacr);
@@ -150,10 +193,20 @@ void bl2_enable_ecc_hihope_rzg2n(void)
 					1 << ((conf->fusaareacr >> 24) & 0xf));
 	}
 
+#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+	/* Clear DRAM ECC Area (for check) */
+	NOTICE("BL2: Clearing DATA area from %lx\n", HHOPE_G2N_FUSAAREA);
+	bzero64(HHOPE_G2N_FUSAAREA, (uint64_t)HHOPE_G2N_FUSAAREA_TOTAL);
+#endif //((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
 }
 
 void bl2_enable_ecc_hihope_rzg2m(void)
 {
+#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+	/* Clear DRAM ECC Area (for check) */
+	NOTICE("BL2: Clearing ECC area from %lx\n", HHOPE_G2M_ECCAREA);
+	bzero64(HHOPE_G2M_ECCAREA, (uint64_t)HHOPE_G2M_ECCAREA_TOTAL);
+#endif //((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
 	mmio_write_32((uintptr_t)((uint32_t *)ADSPLCR0), adsplcr0);
 	mmio_write_32((uintptr_t)((uint32_t *)ADSPLCR1), adsplcr1);
 	mmio_write_32((uintptr_t)((uint32_t *)ADSPLCR2), adsplcr2);
@@ -166,4 +219,9 @@ void bl2_enable_ecc_hihope_rzg2m(void)
 	NOTICE("     ADSPLCR2=0x%x\n",adsplcr2);
 	NOTICE("     ADSPLCR3=0x%x\n",adsplcr3);
 	NOTICE("     FUSACR=0x%x\n",fusacr);
+#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+	/* Clear DRAM data area to initialize ECC area */
+	NOTICE("BL2: Clearing DATA area from %lx\n", HHOPE_G2M_FUSAAREA);
+	bzero64(HHOPE_G2M_FUSAAREA, (uint64_t)HHOPE_G2M_FUSAAREA_TOTAL);
+#endif //((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
 }
-- 
2.7.4

