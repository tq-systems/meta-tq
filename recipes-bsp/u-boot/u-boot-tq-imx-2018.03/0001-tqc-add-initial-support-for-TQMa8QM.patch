From a0ed831bc7bc6dded4bbf832d1c3ebd4a9a49a84 Mon Sep 17 00:00:00 2001
From: Markus Niebel <Markus.Niebel@tq-group.com>
Date: Tue, 27 Aug 2019 13:59:16 +0200
Subject: [PATCH] tqc: add initial support for TQMa8QM

Signed-off-by: Markus Niebel <Markus.Niebel@tq-group.com>
---
 arch/arm/mach-imx/imx8/Kconfig      |  29 ++
 board/tqc/tqma8x/Kconfig            |  77 ++++++
 board/tqc/tqma8x/Makefile           |   9 +
 board/tqc/tqma8x/tqma8x-mba8x.c     | 190 +++++++++++++
 board/tqc/tqma8x/tqma8x.c           | 119 ++++++++
 configs/tqma8qm_mba8x_mmc_defconfig |  98 +++++++
 include/configs/tqma8x-mba8x.h      |  29 ++
 include/configs/tqma8x.h            | 409 ++++++++++++++++++++++++++++
 8 files changed, 960 insertions(+)
 create mode 100644 board/tqc/tqma8x/Kconfig
 create mode 100644 board/tqc/tqma8x/Makefile
 create mode 100644 board/tqc/tqma8x/tqma8x-mba8x.c
 create mode 100644 board/tqc/tqma8x/tqma8x.c
 create mode 100644 configs/tqma8qm_mba8x_mmc_defconfig
 create mode 100644 include/configs/tqma8x-mba8x.h
 create mode 100644 include/configs/tqma8x.h

diff --git a/arch/arm/mach-imx/imx8/Kconfig b/arch/arm/mach-imx/imx8/Kconfig
index 46f685d93b..8c28f6e0b9 100644
--- a/arch/arm/mach-imx/imx8/Kconfig
+++ b/arch/arm/mach-imx/imx8/Kconfig
@@ -77,6 +77,34 @@ config TARGET_IMX8QXP_MEK
 	select SUPPORT_SPL
 	select IMX8QXP
 
+config TARGET_TQMA8X
+	bool "Support TQMa8x board"
+	select BOARD_LATE_INIT
+	select IMX8QM
+	select ARCH_MISC_INIT
+	select BOARD_EARLY_INIT_F
+	select PINCTRL
+	select PINCTRL_FULL
+	select PINCTRL_IMX8
+	select OF_CONTROL
+	select DM
+	select DM_GPIO
+	select MXC_GPIO
+	select DM_SERIAL
+	select FSL_LPUART
+	select DM_MMC
+	select FSL_FSPI
+	select DM_SPI
+	select DM_SPI_FLASH
+	select SPI_FLASH
+	select SPI_FLASH_MTD
+	select SPI_FLASH_4BYTES_ADDR
+	select SPI_FLASH_MACRONIX
+	select SPI_FLASH_SPANSION
+	select SPI_FLASH_STMICRO
+	select SPI_FLASH_SST
+	select SPI_FLASH_WINBOND
+
 config TARGET_TQMA8XX
 	bool "Support TQMa8Xx board"
 	select BOARD_LATE_INIT
@@ -141,6 +169,7 @@ source "board/freescale/imx8qm_mek/Kconfig"
 source "board/freescale/imx8qxp_arm2/Kconfig"
 source "board/freescale/imx8qxp_mek/Kconfig"
 source "board/tqc/tqma8xx/Kconfig"
+source "board/tqc/tqma8x/Kconfig"
 source "board/tqc/tqma8xxs/Kconfig"
 
 endif
diff --git a/board/tqc/tqma8x/Kconfig b/board/tqc/tqma8x/Kconfig
new file mode 100644
index 0000000000..58853bd4bf
--- /dev/null
+++ b/board/tqc/tqma8x/Kconfig
@@ -0,0 +1,77 @@
+if TARGET_TQMA8X
+
+config SYS_BOARD
+	default "tqma8x"
+
+config SYS_VENDOR
+	default "tqc"
+
+config SYS_CONFIG_NAME
+	default "tqma8x"
+
+choice
+	prompt "TQMa8x CPU variant"
+	default TQMA8X_MX8QM
+	help
+	  Select cpu variant for TQMa8x
+
+config TQMA8X_CPU_MX8QM
+	bool "TQMa8x with i.MX8QM"
+	help
+	  Select CPU i.MX8QM
+
+endchoice
+
+choice
+	prompt "TQMa8x RAM size"
+	default TQMA8X_RAM_2048MB if TQMA8X_CPU_MX8QM
+	help
+	  Select RAM size for TQMa8x
+
+config TQMA8X_RAM_2048MB
+	bool "TQMa8x with 2048 MiB RAM"
+	help
+	  Select variant with 2048 MiB RAM
+
+endchoice
+
+choice
+	prompt "TQMa8x base board variant"
+	default TQMA8X_BB_MBA8X
+	help
+	  Select base board for TQMa8x
+
+config TQMA8X_BB_MBA8X
+	bool "TQMa8x on MBa8x Starterkit"
+	select TQC_SDMMC
+	select DM_ETH
+	help
+	  Select the MBa8x starterkit. This features a GigE Phy, USB, SD-Card
+	  etc.
+
+endchoice
+
+config DEFAULT_DEVICE_TREE
+	default "fsl-imx8qm-tqma8qm-mba8x" if TQMA8X_CPU_MX8QM && TQMA8X_BB_MBA8X
+
+config DEFAULT_FDT_FILE
+	default "fsl-imx8qm-tqma8qm-mba8x" if TQMA8X_CPU_MX8QM && TQMA8X_BB_MBA8X
+
+choice
+	prompt "TQMa8x boot device"
+	default TQMA8X_BOOT_SDCARD
+	help
+	  Select boot device for TQMa8x
+
+config TQMA8X_BOOT_SDCARD
+	bool "TQMa8x from SD / e-MMC"
+	select SD_BOOT
+	select ENV_IS_IN_MMC
+	help
+	  Select booting from SD / e-MMC
+
+endchoice
+
+source "board/tqc/common/Kconfig"
+
+endif
diff --git a/board/tqc/tqma8x/Makefile b/board/tqc/tqma8x/Makefile
new file mode 100644
index 0000000000..b15ea0e1ae
--- /dev/null
+++ b/board/tqc/tqma8x/Makefile
@@ -0,0 +1,9 @@
+#
+# Copyright 2019 TQ Systems GmbH
+#
+# SPDX-License-Identifier:	GPL-2.0+
+#
+
+obj-y += tqma8x.o
+obj-$(CONFIG_TQMA8X_BB_MBA8X) += tqma8x-mba8x.o
+
diff --git a/board/tqc/tqma8x/tqma8x-mba8x.c b/board/tqc/tqma8x/tqma8x-mba8x.c
new file mode 100644
index 0000000000..d96a779d82
--- /dev/null
+++ b/board/tqc/tqma8x/tqma8x-mba8x.c
@@ -0,0 +1,190 @@
+/*
+ * Copyright 2018-2019 TQ Systems GmbH
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+#include <common.h>
+#include <dm.h>
+#include <environment.h>
+#include <errno.h>
+#include <fdt_support.h>
+#include <fsl_esdhc.h>
+#include <fsl_ifc.h>
+#include <linux/libfdt.h>
+#include <malloc.h>
+#include <netdev.h>
+#include <power-domain.h>
+
+#include <asm/gpio.h>
+#include <asm/io.h>
+#include <asm/arch/clock.h>
+#include <asm/mach-imx/sci/sci.h>
+#include <asm/arch/imx8-pins.h>
+#include <asm/arch/iomux.h>
+#include <asm/arch/lpcg.h>
+#include <asm/arch/sys_proto.h>
+#include <power-domain.h>
+
+#include "../common/tqc_bb.h"
+#include "../common/tqc_board_gpio.h"
+#include "../common/tqc_eeprom.h"
+
+#define MBA8XX_BOARD_NAME "MBa8Xx"
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#define UART_PAD_CTRL	((SC_PAD_CONFIG_OUT_IN << PADRING_CONFIG_SHIFT) | (SC_PAD_ISO_OFF << PADRING_LPCONFIG_SHIFT) \
+						| (SC_PAD_28FDSOI_DSE_DV_HIGH << PADRING_DSE_SHIFT) | (SC_PAD_28FDSOI_PS_PU << PADRING_PULL_SHIFT))
+
+#define PCIE_PAD_CTRL	((SC_PAD_CONFIG_OD_IN << PADRING_CONFIG_SHIFT))
+
+static const iomux_cfg_t board_pcie_pins[] = {
+/*
+	SC_P_PCIE_CTRL0_PERST_B | MUX_MODE_ALT(4) | MUX_PAD_CTRL(PCIE_PAD_CTRL),
+	SC_P_PCIE_CTRL0_CLKREQ_B | MUX_MODE_ALT(4) | MUX_PAD_CTRL(PCIE_PAD_CTRL),
+	SC_P_PCIE_CTRL0_WAKE_B  | MUX_MODE_ALT(4) | MUX_PAD_CTRL(PCIE_PAD_CTRL),
+*/
+	SC_P_PCIE_CTRL0_CLKREQ_B | MUX_MODE_ALT(0) | MUX_PAD_CTRL(PCIE_PAD_CTRL),
+	SC_P_PCIE_CTRL0_WAKE_B | MUX_MODE_ALT(0) | MUX_PAD_CTRL(PCIE_PAD_CTRL),
+	SC_P_PCIE_CTRL0_PERST_B | MUX_MODE_ALT(0) | MUX_PAD_CTRL(PCIE_PAD_CTRL),
+};
+
+static void setup_iomux_pcie(void)
+{
+	imx8_iomux_setup_multiple_pads(board_pcie_pins, ARRAY_SIZE(board_pcie_pins));
+}
+
+static iomux_cfg_t uart1_pads[] = {
+	SC_P_UART1_RX | MUX_MODE_ALT(0) | MUX_PAD_CTRL(UART_PAD_CTRL),
+	SC_P_UART1_TX | MUX_MODE_ALT(0) | MUX_PAD_CTRL(UART_PAD_CTRL),
+};
+
+static void setup_iomux_uart(void)
+{
+	imx8_iomux_setup_multiple_pads(uart1_pads, ARRAY_SIZE(uart1_pads));
+}
+
+int tqc_bb_board_early_init_f(void)
+{
+	sc_ipc_t ipcHndl = 0;
+	sc_err_t sciErr = 0;
+
+	ipcHndl = gd->arch.ipc_channel_handle;
+
+	/* Power up UART1 */
+	sciErr = sc_pm_set_resource_power_mode(ipcHndl, SC_R_UART_1, SC_PM_PW_MODE_ON);
+	if (sciErr != SC_ERR_NONE)
+		return 0;
+
+	/* Set UART1 clock root to 80 MHz */
+	sc_pm_clock_rate_t rate = 80000000;
+	sciErr = sc_pm_set_clock_rate(ipcHndl, SC_R_UART_1, 2, &rate);
+	if (sciErr != SC_ERR_NONE)
+		return 0;
+
+	/* Enable UART1 clock root */
+	sciErr = sc_pm_clock_enable(ipcHndl, SC_R_UART_1, 2, true, false);
+	if (sciErr != SC_ERR_NONE)
+		return 0;
+
+	LPCG_AllClockOn(LPUART_1_LPCG);
+
+	setup_iomux_uart();
+
+	setup_iomux_pcie();
+
+	return 0;
+}
+
+int tqc_bb_checkboard(void)
+{
+	puts("Board: " TQMA8_BOARD_NAME " on " MBA8XX_BOARD_NAME " (" TQMA8_BOARD_REV ")\n");
+
+	return 0;
+}
+
+static const struct tqc_gpio_init_data mba8xx_gid[] = {
+	{
+		.name = "GPIO3_5",
+		.label = "REV_0",
+		.flags = GPIOD_IS_IN,
+	}, {
+		.name = "GPIO3_6",
+		.label = "REV_1",
+		.flags = GPIOD_IS_IN,
+	}, {
+		.name = "GPIO3_7",
+		.label = "REV_2",
+		.flags = GPIOD_IS_IN,
+	}, {
+		.name = "GPIO1_13",
+		.label = "KEY_A#",
+		.flags = GPIOD_IS_IN,
+	}, {
+		.name = "GPIO1_14",
+		.label = "KEY_B#",
+		.flags = GPIOD_IS_IN,
+	}, {
+		.name = "GPIO1_26",
+		.label = "GPIO1_26",
+		.flags = GPIOD_IS_IN,
+	}, {
+		.name = "GPIO4_19",
+		.label = "GPIO4_19",
+		.flags = GPIOD_IS_IN,
+	},
+};
+
+int tqc_bb_board_init(void)
+{
+	return tqc_board_gpio_init(mba8xx_gid, ARRAY_SIZE(mba8xx_gid));
+
+}
+
+#ifdef CONFIG_OF_BOARD_SETUP
+int tqc_bb_ft_board_setup(void *blob, bd_t *bd)
+{
+	return 0;
+}
+#endif
+
+/*
+ * SD0 -> mmc0 / mmcblk0
+ * SD1 -> mmc1 / mmcblk1
+ */
+int board_mmc_get_env_dev(int devno)
+{
+	return devno;
+}
+
+int mmc_map_to_kernel_blk(int dev_no)
+{
+	return dev_no;
+}
+
+int tqc_bb_board_late_init(void)
+{
+#ifdef CONFIG_ENV_VARS_UBOOT_RUNTIME_CONFIG
+	env_set("board_name", "MBA8XX_BOARD_NAME");
+	env_set("board_rev", "iMX8QXP");
+#endif
+
+#ifdef CONFIG_ENV_IS_IN_MMC
+	board_late_mmc_env_init();
+#endif
+
+	return 0;
+}
+
+void board_quiesce_devices()
+{
+	const char *power_on_devices[] = {
+		"dma_lpuart1",
+
+		/* HIFI DSP boot */
+		"audio_sai0",
+		"audio_ocram",
+	};
+
+	power_off_pd_devices(power_on_devices, ARRAY_SIZE(power_on_devices));
+}
diff --git a/board/tqc/tqma8x/tqma8x.c b/board/tqc/tqma8x/tqma8x.c
new file mode 100644
index 0000000000..c839fa9fa6
--- /dev/null
+++ b/board/tqc/tqma8x/tqma8x.c
@@ -0,0 +1,119 @@
+/*
+ * Copyright 2018-2019 TQ Systems GmbH
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+#include <common.h>
+#include <malloc.h>
+#include <errno.h>
+#include <netdev.h>
+#include <fsl_ifc.h>
+#include <fdt_support.h>
+#include <linux/libfdt.h>
+#include <environment.h>
+#include <fsl_esdhc.h>
+
+#include <asm/io.h>
+#include <asm/gpio.h>
+#include <asm/arch/clock.h>
+#include <asm/mach-imx/sci/sci.h>
+#include <asm/arch/imx8-pins.h>
+#include <dm.h>
+#include <asm/arch/iomux.h>
+#include <asm/arch/sys_proto.h>
+#include <power-domain.h>
+#include <cdns3-uboot.h>
+
+#include "../common/tqc_bb.h"
+
+DECLARE_GLOBAL_DATA_PTR;
+
+int board_early_init_f(void)
+{
+	tqc_bb_board_early_init_f();
+
+	return 0;
+}
+
+static void board_gpio_init(void)
+{
+
+}
+
+int checkboard(void)
+{
+	print_bootinfo();
+
+	/* Note:  After reloc, ipcHndl will no longer be valid.  If handle
+	 *        returned by sc_ipc_open matches SC_IPC_CH, use this
+	 *        macro (valid after reloc) for subsequent SCI calls.
+	 */
+	if (gd->arch.ipc_channel_handle != SC_IPC_CH)
+		printf("\nSCI error! Invalid handle\n");
+
+#ifdef SCI_FORCE_ABORT
+	sc_rpc_msg_t abort_msg;
+
+	puts("Send abort request\n");
+	RPC_SIZE(&abort_msg) = 1;
+	RPC_SVC(&abort_msg) = SC_RPC_SVC_ABORT;
+	sc_ipc_write(SC_IPC_CH, &abort_msg);
+
+	/* Close IPC channel */
+	sc_ipc_close(SC_IPC_CH);
+#endif /* SCI_FORCE_ABORT */
+
+	return tqc_bb_checkboard();
+}
+
+int board_init(void)
+{
+#ifdef CONFIG_MXC_GPIO
+	board_gpio_init();
+#endif
+
+	tqc_bb_board_init();
+
+	return 0;
+}
+
+void detail_board_ddr_info(void)
+{
+	puts("\nDDR    ");
+}
+
+/*
+ * Board specific reset that is system reset.
+ */
+void reset_cpu(ulong addr)
+{
+	puts("SCI reboot request");
+	sc_pm_reboot(SC_IPC_CH, SC_PM_RESET_TYPE_COLD);
+	while (1)
+		putc('.');
+}
+
+#ifdef CONFIG_OF_BOARD_SETUP
+int ft_board_setup(void *blob, bd_t *bd)
+{
+	return tqc_bb_ft_board_setup(blob, bd);
+}
+#endif
+
+int board_late_init(void)
+{
+#ifdef CONFIG_ENV_VARS_UBOOT_RUNTIME_CONFIG
+	env_set("board_name", TQMA8_BOARD_NAME);
+	env_set("board_rev", TQMA8_BOARD_REV);
+#endif
+
+	tqc_bb_board_late_init();
+
+	env_set("sec_boot", "no");
+#ifdef CONFIG_AHAB_BOOT
+	env_set("sec_boot", "yes");
+#endif
+
+	return 0;
+}
+
diff --git a/configs/tqma8qm_mba8x_mmc_defconfig b/configs/tqma8qm_mba8x_mmc_defconfig
new file mode 100644
index 0000000000..e3e3d336d0
--- /dev/null
+++ b/configs/tqma8qm_mba8x_mmc_defconfig
@@ -0,0 +1,98 @@
+CONFIG_ARM=y
+CONFIG_ARCH_IMX8=y
+CONFIG_DEFAULT_DEVICE_TREE="fsl-imx8qm-mek"
+CONFIG_TARGET_TQMA8X=yy
+CONFIG_SYS_TEXT_BASE=0x80020000
+CONFIG_CMD_IMPORTENV=n
+CONFIG_SYS_MALLOC_F_LEN=0x2000
+CONFIG_DM=y
+CONFIG_CMD_CACHE=y
+
+CONFIG_DM_SERIAL=y
+CONFIG_FSL_LPUART=y
+CONFIG_OF_CONTROL=y
+CONFIG_DM_I2C=y
+# CONFIG_DM_I2C_COMPAT is not set
+CONFIG_SYS_I2C_IMX_LPI2C=y
+CONFIG_CMD_I2C=y
+
+CONFIG_FASTBOOT=y
+CONFIG_USB_FUNCTION_FASTBOOT=y
+CONFIG_CMD_FASTBOOT=y
+CONFIG_ANDROID_BOOT_IMAGE=y
+CONFIG_FSL_FASTBOOT=y
+CONFIG_FASTBOOT_BUF_ADDR=0x82800000
+CONFIG_FASTBOOT_BUF_SIZE=0x40000000
+CONFIG_FASTBOOT_FLASH=y
+CONFIG_FASTBOOT_FLASH_MMC_DEV=0
+CONFIG_FASTBOOT_USB_DEV=1
+
+CONFIG_USB_XHCI_HCD=y
+CONFIG_USB_XHCI_IMX8=y
+
+CONFIG_DM_USB=y
+CONFIG_USB_EHCI_HCD=y
+
+CONFIG_CMD_USB=y
+CONFIG_USB=y
+CONFIG_USB_STORAGE=y
+CONFIG_USB_TCPC=y
+
+CONFIG_CMD_USB_MASS_STORAGE=y
+CONFIG_USB_GADGET=y
+# CONFIG_CI_UDC=y
+CONFIG_USB_GADGET_DOWNLOAD=y
+CONFIG_USB_GADGET_MANUFACTURER="FSL"
+CONFIG_USB_GADGET_VENDOR_NUM=0x0525
+CONFIG_USB_GADGET_PRODUCT_NUM=0xa4a5
+
+CONFIG_USB_CDNS3=y
+CONFIG_USB_CDNS3_GADGET=y
+CONFIG_USB_GADGET_DUALSPEED=y
+
+CONFIG_CMD_GPIO=y
+CONFIG_DM_GPIO=y
+CONFIG_DM_PCA953X=y
+CONFIG_BOOTDELAY=3
+CONFIG_IMX_BOOTAUX=y
+CONFIG_FS_FAT=y
+CONFIG_CMD_FAT=y
+CONFIG_CMD_MMC=y
+CONFIG_DM_MMC=y
+CONFIG_MMC_IO_VOLTAGE=y
+CONFIG_MMC_UHS_SUPPORT=y
+CONFIG_MMC_HS400_SUPPORT=y
+CONFIG_EFI_PARTITION=y
+CONFIG_FSL_FSPI=y
+CONFIG_DM_SPI=y
+CONFIG_DM_SPI_FLASH=y
+CONFIG_SPI_FLASH=y
+CONFIG_SPI_FLASH_4BYTES_ADDR=y
+CONFIG_SPI_FLASH_STMICRO=y
+CONFIG_CMD_SF=y
+
+CONFIG_CMD_PING=y
+CONFIG_CMD_DHCP=y
+CONFIG_CMD_MII=y
+CONFIG_DM_ETH=y
+# CONFIG_EFI_LOADER is not set
+
+CONFIG_DM_REGULATOR=y
+CONFIG_DM_REGULATOR_FIXED=y
+CONFIG_DM_REGULATOR_GPIO=y
+
+CONFIG_VIDEO=y
+CONFIG_VIDEO_IMX_HDP_LOAD=y
+
+CONFIG_PINCTRL=y
+CONFIG_PINCTRL_IMX8=y
+
+CONFIG_POWER_DOMAIN=y
+CONFIG_IMX8_POWER_DOMAIN=y
+
+CONFIG_DM_THERMAL=y
+CONFIG_IMX_SC_THERMAL=y
+
+CONFIG_ENV_IS_IN_MMC=y
+
+CONFIG_SMC_FUSE=y
diff --git a/include/configs/tqma8x-mba8x.h b/include/configs/tqma8x-mba8x.h
new file mode 100644
index 0000000000..dbfdc861a8
--- /dev/null
+++ b/include/configs/tqma8x-mba8x.h
@@ -0,0 +1,29 @@
+/*
+ * Copyright 2019 TQ Systems GmbH
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#if !defined(__TQMA8X_MBA8X_H)
+#define __TQMA8X_MBA8X_H
+
+#define CONFIG_FEC_MXC
+#define CONFIG_FEC_XCV_TYPE		RGMII
+#define FEC_QUIRK_ENET_MAC
+
+/* #define CONFIG_PHY_GIGE */ /* Support for 1000BASE-X */
+/* #define CONFIG_PHYLIB */
+/* #define CONFIG_PHY_TI */
+#define CONFIG_MII
+
+#define MX8QM_FEC1_BASE			0x5B040000U
+#define MX8QM_FEC2_BASE			0x5B050000U
+#define CONFIG_FEC_MXC_MDIO_BASE	MX8QM_FEC1_BASE
+
+#define CONFIG_FEC_MXC_PHYADDR		0x1F
+
+#define BB_ENV_SETTINGS \
+	"console=ttyLP1,115200 earlycon=lpuart32,5a070000,115200\0" \
+	"fdt_file=" CONFIG_DEFAULT_FDT_FILE "\0"
+
+#endif /* __TQMA8X_MBA8X_H */
diff --git a/include/configs/tqma8x.h b/include/configs/tqma8x.h
new file mode 100644
index 0000000000..9de1684b42
--- /dev/null
+++ b/include/configs/tqma8x.h
@@ -0,0 +1,409 @@
+/*
+ * Copyright 2019 TQ Systems GmbH
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef __TQMA8X_H
+#define __TQMA8X_H
+
+#include <linux/sizes.h>
+#include <asm/arch/imx-regs.h>
+
+#ifdef CONFIG_SPL_BUILD
+#error / not yet supported */
+#endif
+
+#define CONFIG_REMAKE_ELF
+
+/*
+ in Kconfig ...
+#define CONFIG_BOARD_EARLY_INIT_F
+#define CONFIG_ARCH_MISC_INIT
+*/
+
+#define CONFIG_CMD_READ
+/* #define CONFIG_FAT_WRITE */
+
+/* Flat Device Tree Definitions */
+#define CONFIG_OF_BOARD_SETUP
+
+#undef CONFIG_CMD_EXPORTENV
+#undef CONFIG_CMD_IMPORTENV
+#undef CONFIG_CMD_IMLS
+
+#undef CONFIG_CMD_CRC32
+#undef CONFIG_BOOTM_NETBSD
+
+#if defined(CONFIG_FSL_ESDHC)
+#define CONFIG_FSL_USDHC
+#define CONFIG_SYS_FSL_ESDHC_ADDR       0
+#define USDHC1_BASE_ADDR                0x5B010000
+#define USDHC2_BASE_ADDR                0x5B020000
+#define CONFIG_SUPPORT_EMMC_BOOT	/* eMMC specific */
+#endif
+
+/* USB Config */
+#ifdef CONFIG_CMD_USB
+#define CONFIG_USB_MAX_CONTROLLER_COUNT 1
+
+/* USB OTG controller configs */
+#ifdef CONFIG_USB_EHCI_HCD
+#define CONFIG_MXC_USB_PORTSC		(PORT_PTS_UTMI | PORT_PTS_PTW)
+#endif
+#endif /* CONFIG_CMD_USB */
+
+/* #define CONFIG_CMD_DATE */
+
+#define CONFIG_ENV_OVERWRITE
+
+#define CONFIG_ENV_VARS_UBOOT_RUNTIME_CONFIG
+
+/* FUSE command */
+#define CONFIG_CMD_FUSE
+
+/* GPIO configs */
+/* #define CONFIG_MXC_GPIO */
+
+#ifdef CONFIG_AHAB_BOOT
+#define AHAB_ENV "sec_boot=yes\0"
+#else
+#define AHAB_ENV "sec_boot=no\0"
+#endif
+
+/* Boot M4 */
+#define M4_BOOT_ENV \
+	"m4_0_image=m4_0.bin\0" \
+	"loadm4image_0=load mmc ${mmcdev}:${mmcpart} ${loadaddr} ${m4_0_image}\0" \
+	"m4boot_0=run loadm4image_0; dcache flush; bootaux ${loadaddr} 0\0" \
+
+#define CONFIG_MFG_ENV_SETTINGS \
+	"mfgtool_args=setenv bootargs console=${console},${baudrate} " \
+		"rdinit=/linuxrc " \
+		"g_mass_storage.stall=0 g_mass_storage.removable=1 " \
+		"g_mass_storage.idVendor=0x066F g_mass_storage.idProduct=0x37FF "\
+		"g_mass_storage.iSerialNumber=\"\" "\
+		"video=imxdpufb5:off video=imxdpufb6:off video=imxdpufb7:off "\
+		"clk_ignore_unused "\
+		"\0" \
+	"initrd_addr=0x83100000\0" \
+	"initrd_high=0xffffffff\0" \
+	"bootcmd_mfg=run mfgtool_args;booti ${loadaddr} ${initrd_addr} ${fdt_addr};\0" \
+
+#define XEN_BOOT_ENV \
+            "xenhyper_bootargs=console=dtuart dtuart=/serial@5a060000 dom0_mem=1024M dom0_max_vcpus=2 dom0_vcpus_pin=true\0" \
+            "xenlinux_bootargs= \0" \
+            "xenlinux_console=hvc0 earlycon=xen\0" \
+            "xenlinux_addr=0x85000000\0" \
+            "xenboot_common=" \
+                "${get_cmd} ${loadaddr} xen;" \
+                "${get_cmd} ${fdt_addr} fsl-imx8qxp-mek-dom0.dtb;" \
+                "${get_cmd} ${xenlinux_addr} ${image};" \
+                "fdt addr ${fdt_addr};" \
+                "fdt resize 256;" \
+                "fdt set /chosen/module@0 reg <0x00000000 ${xenlinux_addr} 0x00000000 0x${filesize}>; " \
+                "fdt set /chosen/module@0 bootargs \"${bootargs} ${xenlinux_bootargs}\"; " \
+                "setenv bootargs ${xenhyper_bootargs};" \
+                "booti ${loadaddr} - ${fdt_addr};" \
+            "\0" \
+            "xennetboot=" \
+                "setenv get_cmd dhcp;" \
+                "setenv console ${xenlinux_console};" \
+                "run netargs;" \
+                "run xenboot_common;" \
+            "\0" \
+            "xenmmcboot=" \
+                "setenv get_cmd \"load mmc ${mmcdev}:${mmcpart}\";" \
+                "setenv console ${xenlinux_console};" \
+                "run mmcargs;" \
+                "run xenboot_common;" \
+            "\0" \
+
+/* Initial environment variables */
+#define TQMA8X_MODULE_ENV_SETTINGS		\
+	CONFIG_MFG_ENV_SETTINGS \
+	M4_BOOT_ENV \
+	XEN_BOOT_ENV \
+	AHAB_ENV \
+	"script=boot.scr\0" \
+	"image=Image\0" \
+	"panel=NULL\0" \
+	"fdt_addr=0x83000000\0"			\
+	"fdt_high=0xffffffffffffffff\0"		\
+	"cntr_addr=0x88000000\0"			\
+	"cntr_file=os_cntr_signed.bin\0" \
+	"boot_fdt=try\0" \
+	"mmcdev="__stringify(CONFIG_SYS_MMC_ENV_DEV)"\0" \
+	"mmcpart=" __stringify(CONFIG_SYS_MMC_IMG_LOAD_PART) "\0" \
+	"mmcautodetect=yes\0" \
+	"loadbootscript=load mmc ${mmcdev}:${mmcpart} ${loadaddr} ${script};\0" \
+	"bootscript=echo Running bootscript from mmc ...; " \
+		"source\0" \
+	"loadimage=load mmc ${mmcdev}:${mmcpart} ${loadaddr} ${image}\0" \
+	"loadfdt=load mmc ${mmcdev}:${mmcpart} ${fdt_addr} ${fdt_file}\0" \
+	"hdp_addr=0x84000000\0" \
+	"hdprx_addr=0x84800000\0" \
+	"hdp_file=hdmitxfw.bin\0" \
+	"hdprx_file=hdmirxfw.bin\0" \
+	"loadhdp=load mmc ${mmcdev}:${mmcpart} ${hdp_addr} ${hdp_file}\0" \
+	"loadhdprx=load mmc ${mmcdev}:${mmcpart} ${hdprx_addr} ${hdprx_file}\0" \
+	"loadcntr=load mmc ${mmcdev}:${mmcpart} ${cntr_addr} ${cntr_file}\0" \
+	"auth_os=auth_cntr ${cntr_addr}\0" \
+	"mmcboot=echo Booting from mmc ...; " \
+		"if run loadhdp; then; hdp load ${hdp_addr}; fi;" \
+		"if run loadhdprx; then; hdprx load ${hdprx_addr}; fi;" \
+		"setenv bootargs; " \
+		"run mmcargs; " \
+		"run loadimage; " \
+		"run loadfdt; " \
+		"if test ${sec_boot} = yes; then " \
+			"if run auth_os; then " \
+				"booti ${loadaddr} - ${fdt_addr}; " \
+			"else " \
+				"echo ERR: failed to authenticate; " \
+			"fi; " \
+		"else " \
+			"if test ${boot_fdt} = yes || test ${boot_fdt} = try; then " \
+				"if run loadfdt; then " \
+					"booti ${loadaddr} - ${fdt_addr}; " \
+				"else " \
+					"echo WARN: Cannot load the DT; " \
+				"fi; " \
+			"else " \
+				"echo wait for boot; " \
+			"fi;" \
+		"fi;\0" \
+	"netboot=echo Booting from net ...; " \
+		"setenv bootargs; " \
+		"run netargs;  " \
+		"run set_getcmd; " \
+		"if ${get_cmd} ${hdp_addr} ${hdp_file}; then; hdp load ${hdp_addr}; fi;" \
+		"if ${get_cmd} ${hdprx_addr} ${hdprx_file}; then; hdprx load ${hdprx_addr}; fi;" \
+		"if test ${sec_boot} = yes; then " \
+			"${get_cmd} ${cntr_addr} ${cntr_file}; " \
+			"if run auth_os; then " \
+				"booti ${loadaddr} - ${fdt_addr}; " \
+			"else " \
+				"echo ERR: failed to authenticate; " \
+			"fi; " \
+		"else " \
+			"${get_cmd} ${loadaddr} ${image}; " \
+			"if test ${boot_fdt} = yes || test ${boot_fdt} = try; then " \
+				"if ${get_cmd} ${fdt_addr} ${fdt_file}; then " \
+					"booti ${loadaddr} - ${fdt_addr}; " \
+				"else " \
+					"echo WARN: Cannot load the DT; " \
+				"fi; " \
+			"else " \
+				"booti; " \
+			"fi;" \
+		"fi;\0" \
+	"update_kernel=run set_getcmd; "                                       \
+		"if ${get_cmd} ${image}; then "                                \
+			"if itest ${filesize} > 0; then "                      \
+				"echo Write kernel image to mmc ${mmcdev}:${firmwarepart}...; " \
+				"save mmc ${mmcdev}:${firmwarepart} ${loadaddr} " \
+					"${image} ${filesize}; "               \
+			"fi; "                                                 \
+		"fi; "                                                         \
+		"setenv filesize; setenv get_cmd \0"                           \
+	"update_fdt=run set_getcmd; "                                          \
+		"if ${get_cmd} ${fdt_file}; then "                             \
+			"if itest ${filesize} > 0; then "                      \
+				"echo Write fdt image to mmc ${mmcdev}:${firmwarepart}...; " \
+				"save mmc ${mmcdev}:${firmwarepart} ${loadaddr} " \
+					"${fdt_file} ${filesize}; "            \
+			"fi; "                                                 \
+		"fi; "                                                         \
+		"setenv filesize; setenv get_cmd \0"                           \
+	"uboot_start=0x40\0"                                                   \
+	"uboot_size=0xfc0\0"                                                   \
+	"uboot=bootstream.bin\0"                                               \
+	"update_uboot=run set_getcmd; if ${get_cmd} ${uboot}; then "           \
+		"if itest ${filesize} > 0; then "                              \
+			"echo Write u-boot image to mmc ${mmcdev} ...; "       \
+			"mmc dev ${mmcdev}; mmc rescan; "                      \
+			"setexpr blkc ${filesize} + 0x1ff; "                   \
+			"setexpr blkc ${blkc} / 0x200; "                       \
+			"if itest ${blkc} <= ${uboot_size}; then "             \
+				"mmc write ${loadaddr} ${uboot_start} "        \
+					"${blkc}; "                            \
+			"fi; "                                                 \
+		"fi; fi; "                                                     \
+		"setenv filesize; setenv blkc \0"                              \
+	"set_getcmd=if test \"${ip_dyn}\" = yes; then "                        \
+			"setenv get_cmd dhcp; "                                \
+		"else "                                                        \
+			"setenv get_cmd tftp; "                                \
+		"fi; \0"                                                       \
+	"rootfsmode=ro\0"                                                      \
+	"addtty=setenv bootargs ${bootargs} console=${console}\0"              \
+	"mmcargs=run addmmc addtty\0"                                          \
+	"mmcrootpart=2\0"                                                      \
+	"addmmc=setenv bootargs ${bootargs} "                                  \
+		"root=/dev/mmcblk${mmcblkdev}p${mmcrootpart} ${rootfsmode} "   \
+		"rootwait\0"                                                   \
+	"netargs=run addnfs addip addtty\0"                                    \
+	"addnfs=setenv bootargs ${bootargs} "                                  \
+		"root=/dev/nfs rw "                                            \
+		"nfsroot=${serverip}:${rootpath},v3,tcp;\0"                    \
+	"netdev=eth0\0"                                                        \
+	"rootpath=/srv/nfs\0"                                                  \
+	"ipmode=static\0"                                                      \
+	"addip_static=setenv bootargs ${bootargs} "                            \
+		"ip=${ipaddr}:${serverip}:${gatewayip}:${netmask}:"            \
+		"${hostname}:${netdev}:off\0"                                  \
+	"addip_dynamic=setenv bootargs ${bootargs} ip=dhcp\0"                  \
+	"addip=if test \"${ipmode}\" != static; then "                         \
+		"run addip_dynamic; else run addip_static; fi\0"
+
+#if !defined(CONFIG_BOOTCOMMAND)
+#define CONFIG_BOOTCOMMAND \
+	   "mmc dev ${mmcdev}; if mmc rescan; then " \
+		   "if run loadbootscript; then " \
+			   "run bootscript; " \
+		   "else " \
+			   "if test ${sec_boot} = yes; then " \
+				   "if run loadcntr; then " \
+					   "run mmcboot; " \
+				   "else run netboot; " \
+				   "fi; " \
+			    "else " \
+				   "if run loadimage; then " \
+					   "run mmcboot; " \
+				   "else run netboot; " \
+				   "fi; " \
+			 "fi; " \
+		   "fi; " \
+	   "else booti ${loadaddr} - ${fdt_addr}; fi"
+#endif
+
+/* Link Definitions */
+#define CONFIG_LOADADDR			0x80280000
+#define CONFIG_SYS_TEXT_BASE		0x80020000
+
+#define CONFIG_SYS_LOAD_ADDR           CONFIG_LOADADDR
+
+#define CONFIG_SYS_INIT_SP_ADDR         0x80200000
+
+
+/* Default environment is in SD */
+#define CONFIG_ENV_SIZE			0x2000
+#if defined(CONFIG_QSPI_BOOT)
+#define CONFIG_ENV_IS_IN_SPI_FLASH
+#define CONFIG_ENV_OFFSET	(4 * 1024 * 1024)
+#define CONFIG_ENV_SECT_SIZE	(128 * 1024)
+#define CONFIG_ENV_SPI_BUS	CONFIG_SF_DEFAULT_BUS
+#define CONFIG_ENV_SPI_CS	CONFIG_SF_DEFAULT_CS
+#define CONFIG_ENV_SPI_MODE	CONFIG_SF_DEFAULT_MODE
+#define CONFIG_ENV_SPI_MAX_HZ	CONFIG_SF_DEFAULT_SPEED
+#elif defined(CONFIG_SD_BOOT)
+/* #define CONFIG_ENV_IS_IN_MMC */
+#define CONFIG_ENV_OFFSET		(4 * SZ_1M)
+#define CONFIG_SYS_MMC_ENV_PART		0	/* user area */
+#else
+#error
+#endif
+
+#define CONFIG_SYS_MMC_IMG_LOAD_PART	1
+
+/* On LPDDR4 board, USDHC1 is for eMMC, USDHC2 is for SD on CPU board
+  */
+#define CONFIG_SYS_MMC_ENV_DEV		-1   /* invalid */
+#define CONFIG_SYS_FSL_USDHC_NUM	2
+
+/* Size of malloc() pool */
+#define CONFIG_SYS_MALLOC_LEN		((CONFIG_ENV_SIZE + (32*1024)) * 1024)
+
+#define CONFIG_SYS_SDRAM_BASE		0x80000000
+#define CONFIG_NR_DRAM_BANKS		1
+#define PHYS_SDRAM_1			0x80000000
+
+#if defined(CONFIG_TQMA8X_RAM_2048MB)
+#define PHYS_SDRAM_1_SIZE		SZ_2G
+#else
+#error
+#endif
+
+/* needed for loop in CPU code */
+#define PHYS_SDRAM_2			0x800000000
+#define PHYS_SDRAM_2_SIZE		0x0000000	/* not placed */
+
+/* Serial */
+#define CONFIG_BAUDRATE			115200
+
+/* Monitor Command Prompt */
+/*
+#define CONFIG_SYS_LONGHELP
+#define CONFIG_HUSH_PARSER
+#define CONFIG_SYS_PROMPT_HUSH_PS2     "> "
+#define CONFIG_AUTO_COMPLETE
+*/
+
+#define CONFIG_SYS_CBSIZE              2048
+#define CONFIG_SYS_MAXARGS             64
+#define CONFIG_SYS_BARGSIZE CONFIG_SYS_CBSIZE
+#define CONFIG_SYS_PBSIZE		(CONFIG_SYS_CBSIZE + \
+					sizeof(CONFIG_SYS_PROMPT) + 16)
+/* #define CONFIG_CMDLINE_EDITING */
+
+/* Generic Timer Definitions */
+#define COUNTER_FREQUENCY		8000000	/* 8MHz */
+
+#define CONFIG_IMX_SMMU
+
+/* MT35XU512ABA1G12 has only one Die, so QSPI0 B won't work */
+#ifdef CONFIG_FSL_FSPI
+#define CONFIG_SF_DEFAULT_BUS		0
+#define CONFIG_SF_DEFAULT_CS		0
+#define CONFIG_SF_DEFAULT_SPEED	40000000
+#define CONFIG_SF_DEFAULT_MODE		SPI_MODE_0
+#define FSL_FSPI_FLASH_SIZE		SZ_64M
+#define FSL_FSPI_FLASH_NUM		1
+#define FSPI0_BASE_ADDR			0x5d120000
+#define FSPI0_AMBA_BASE			0
+
+/* TODO: */
+/* #define CONFIG_SPI_FLASH_4BYTES_ADDR */
+/* #undef CONFIG_SPI_FLASH_BAR */
+
+#define CONFIG_SYS_FSL_FSPI_AHB
+#endif
+
+#define CONFIG_OF_SYSTEM_SETUP
+#define BOOTAUX_RESERVED_MEM_BASE 0x88000000
+#define BOOTAUX_RESERVED_MEM_SIZE 0x08000000 /* Reserve from second 128MB */
+
+#define CONFIG_CMD_MEMTEST
+#if defined(CONFIG_CMD_MEMTEST)
+#define CONFIG_SYS_ALT_MEMTEST
+#define CONFIG_SYS_MEMTEST_START  (BOOTAUX_RESERVED_MEM_BASE)
+#define CONFIG_SYS_MEMTEST_END    (CONFIG_SYS_MEMTEST_START + (PHYS_SDRAM_1_SIZE / 4) * 3)
+#define CONFIG_SYS_MEMTEST_SCRATCH CONFIG_SYS_MEMTEST_END
+#endif
+
+#if defined(CONFIG_TQMA8X_CPU_MX8QM)
+#define TQMA8_BOARD_NAME	"TQMa8QM"
+#define TQMA8_BOARD_REV		"iMX8QM"
+#else
+#error
+#endif
+
+#if defined(CONFIG_TQMA8X_BB_MBA8X)
+#include "tqma8x-mba8x.h"
+#else
+#error
+#endif
+
+#define CONFIG_EXTRA_ENV_SETTINGS		\
+	TQMA8XX_MODULE_ENV_SETTINGS		\
+	BB_ENV_SETTINGS
+
+#ifndef CONFIG_SPL_BUILD
+#define BOOT_TARGET_DEVICES(func) \
+	func(MMC, mmc, 0) \
+	func(USB, usb, 0)
+#include <config_distro_bootcmd.h>
+#endif
+
+#endif /* __TQMA8X_H */
