From c2ae29f90189065e2f351660dfc195dc5ada226f Mon Sep 17 00:00:00 2001
From: Markus Niebel <Markus.Niebel@tq-group.com>
Date: Mon, 12 Jul 2021 08:25:59 +0200
Subject: [PATCH] Allow running in background with STDIN set to O_NONBLOCKING

Since commit

38986c1 (kmscube: add option to run for specified # of frames)

we have the option of running for a given number of frames. This allows
usage for instance in automatic system tests like climate chamber etc.
To allow starting in background without termination from STDIN add a
new option that prevents polling / selecting for console input.

Signed-off-by: Markus Niebel <Markus.Niebel@tq-group.com>
---
 drm-atomic.c | 20 +++++++++++---------
 drm-common.h |  1 +
 drm-legacy.c |  2 +-
 kmscube.c    |  8 +++++++-
 4 files changed, 20 insertions(+), 11 deletions(-)

Index: git/drm-atomic.c
===================================================================
--- git.orig/drm-atomic.c
+++ git/drm-atomic.c
@@ -289,15 +289,17 @@ static int atomic_run(const struct gbm *
 			report_time = cur_time;
 		}
 
-		/* Check for user input: */
-		struct pollfd fdset[] = { {
-			.fd = STDIN_FILENO,
-			.events = POLLIN,
-		} };
-		ret = poll(fdset, ARRAY_SIZE(fdset), 0);
-		if (ret > 0) {
-			printf("user interrupted!\n");
-			return 0;
+		if (!drm.nonblocking) {
+			/* Check for user input: */
+			struct pollfd fdset[] = { {
+				.fd = STDIN_FILENO,
+				.events = POLLIN,
+			} };
+			ret = poll(fdset, ARRAY_SIZE(fdset), 0);
+			if (ret > 0) {
+				printf("user interrupted!\n");
+				return 0;
+			}
 		}
 
 		/*
@@ -392,12 +394,12 @@ static int get_plane_id(void)
 }
 
 const struct drm * init_drm_atomic(const char *device, const char *mode_str,
-		unsigned int vrefresh, unsigned int count)
+		unsigned int vrefresh, unsigned int count, bool nonblocking)
 {
 	uint32_t plane_id;
 	int ret;
 
-	ret = init_drm(&drm, device, mode_str, vrefresh, count);
+	ret = init_drm(&drm, device, mode_str, vrefresh, count, nonblocking);
 	if (ret)
 		return NULL;
 
Index: git/drm-common.h
===================================================================
--- git.orig/drm-common.h
+++ git/drm-common.h
@@ -65,6 +65,7 @@ struct drm {
 
 	/* number of frames to run for: */
 	unsigned int count;
+	bool nonblocking;
 
 	int (*run)(const struct gbm *gbm, const struct egl *egl);
 };
@@ -76,8 +77,13 @@ struct drm_fb {
 
 struct drm_fb * drm_fb_get_from_bo(struct gbm_bo *bo);
 
-int init_drm(struct drm *drm, const char *device, const char *mode_str, unsigned int vrefresh, unsigned int count);
-const struct drm * init_drm_legacy(const char *device, const char *mode_str, unsigned int vrefresh, unsigned int count);
-const struct drm * init_drm_atomic(const char *device, const char *mode_str, unsigned int vrefresh, unsigned int count);
+int init_drm(struct drm *drm, const char *device, const char *mode_str,
+	     unsigned int vrefresh, unsigned int count, bool nonblocking);
+const struct drm * init_drm_legacy(const char *device, const char *mode_str,
+				   unsigned int vrefresh, unsigned int count,
+				   bool nonblocking);
+const struct drm * init_drm_atomic(const char *device, const char *mode_str,
+				   unsigned int vrefresh, unsigned int count,
+				   bool nonblocking);
 
 #endif /* _DRM_COMMON_H */
Index: git/drm-legacy.c
===================================================================
--- git.orig/drm-legacy.c
+++ git/drm-legacy.c
@@ -131,7 +131,7 @@ static int legacy_run(const struct gbm *
 			} else if (ret == 0) {
 				printf("select timeout!\n");
 				return -1;
-			} else if (FD_ISSET(0, &fds)) {
+			} else if (FD_ISSET(0, &fds) && !drm.nonblocking) {
 				printf("user interrupted!\n");
 				return 0;
 			}
@@ -170,11 +170,11 @@ static int legacy_run(const struct gbm *
 }
 
 const struct drm * init_drm_legacy(const char *device, const char *mode_str,
-		unsigned int vrefresh, unsigned int count)
+		unsigned int vrefresh, unsigned int count, bool nonblocking)
 {
 	int ret;
 
-	ret = init_drm(&drm, device, mode_str, vrefresh, count);
+	ret = init_drm(&drm, device, mode_str, vrefresh, count, nonblocking);
 	if (ret)
 		return NULL;
 
Index: git/kmscube.c
===================================================================
--- git.orig/kmscube.c
+++ git/kmscube.c
@@ -41,7 +41,7 @@ static const struct egl *egl;
 static const struct gbm *gbm;
 static const struct drm *drm;
 
-static const char *shortopts = "Ac:D:f:M:m:p:S:s:V:v:x";
+static const char *shortopts = "Ac:D:f:M:m:p:S:s:V:v:xn";
 
 static const struct option longopts[] = {
 	{"atomic", no_argument,       0, 'A'},
@@ -55,12 +55,13 @@ static const struct option longopts[] =
 	{"video",  required_argument, 0, 'V'},
 	{"vmode",  required_argument, 0, 'v'},
 	{"surfaceless", no_argument,  0, 'x'},
+	{"nonblocking", no_argument,  0, 'n'},
 	{0, 0, 0, 0}
 };
 
 static void usage(const char *name)
 {
-	printf("Usage: %s [-ADfMmSsVvx]\n"
+	printf("Usage: %s [-ADfMmSsVvxn]\n"
 			"\n"
 			"options:\n"
 			"    -A, --atomic             use atomic modesetting and fencing\n"
@@ -82,6 +83,7 @@ static void usage(const char *name)
 			"    -v, --vmode=VMODE        specify the video mode in the format\n"
 			"                             <mode>[-<vrefresh>]\n"
 			"    -x, --surfaceless        use surfaceless mode, instead of gbm surface\n"
+			"    -n, --nonblocking        do not poll for input\n"
 			,
 			name);
 }
@@ -104,6 +106,7 @@ int main(int argc, char *argv[])
 	unsigned int vrefresh = 0;
 	unsigned int count = ~0;
 	bool surfaceless = false;
+	bool nonblocking = false;
 
 #ifdef HAVE_GST
 	gst_init(&argc, &argv);
@@ -184,6 +187,9 @@ int main(int argc, char *argv[])
 		case 'x':
 			surfaceless = true;
 			break;
+		case 'n':
+			nonblocking = true;
+			break;
 		default:
 			usage(argv[0]);
 			return -1;
@@ -191,9 +197,9 @@ int main(int argc, char *argv[])
 	}
 
 	if (atomic)
-		drm = init_drm_atomic(device, mode_str, vrefresh, count);
+		drm = init_drm_atomic(device, mode_str, vrefresh, count, nonblocking);
 	else
-		drm = init_drm_legacy(device, mode_str, vrefresh, count);
+		drm = init_drm_legacy(device, mode_str, vrefresh, count, nonblocking);
 	if (!drm) {
 		printf("failed to initialize %s DRM\n", atomic ? "atomic" : "legacy");
 		return -1;
Index: git/drm-common.c
===================================================================
--- git.orig/drm-common.c
+++ git/drm-common.c
@@ -213,7 +213,7 @@ static int find_drm_device(drmModeRes **
 }
 
 int init_drm(struct drm *drm, const char *device, const char *mode_str,
-		unsigned int vrefresh, unsigned int count)
+		unsigned int vrefresh, unsigned int count, bool nonblocking)
 {
 	drmModeRes *resources;
 	drmModeConnector *connector = NULL;
@@ -329,6 +329,7 @@ int init_drm(struct drm *drm, const char
 
 	drm->connector_id = connector->connector_id;
 	drm->count = count;
+	drm->nonblocking = nonblocking;
 
 	return 0;
 }
Index: git/texturator.c
===================================================================
--- git.orig/texturator.c
+++ git/texturator.c
@@ -950,7 +950,7 @@ int main(int argc, char *argv[])
 	print_summary();
 
 	/* no real need for atomic here: */
-	drm = init_drm_legacy(device, mode_str, vrefresh, ~0);
+	drm = init_drm_legacy(device, mode_str, vrefresh, ~0, false);
 	if (!drm) {
 		printf("failed to initialize DRM\n");
 		return -1;
