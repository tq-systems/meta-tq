From 11788291661766ae6ff9ea4ed9bad8ef861e851e Mon Sep 17 00:00:00 2001
From: Michael Krummsdorf <michael.krummsdorf@tq-group.com>
Date: Wed, 17 Jan 2018 14:36:24 +0100
Subject: [PATCH 053/188] rtc: pcf85063: change offset via dt

Signed-off-by: Michael Krummsdorf <michael.krummsdorf@tq-group.com>
---
 .../devicetree/bindings/rtc/nxp,pcf85063.txt         |  3 +++
 drivers/rtc/rtc-pcf85063.c                           | 12 +++++++++++-
 2 files changed, 14 insertions(+), 1 deletion(-)

diff --git a/Documentation/devicetree/bindings/rtc/nxp,pcf85063.txt b/Documentation/devicetree/bindings/rtc/nxp,pcf85063.txt
index e0dae706803b..67495dd7672a 100644
--- a/Documentation/devicetree/bindings/rtc/nxp,pcf85063.txt
+++ b/Documentation/devicetree/bindings/rtc/nxp,pcf85063.txt
@@ -7,10 +7,13 @@ Required properties:
 Optional properties:
 - nxp,quartz_load : Internal oscillator capacity for quartz crystals
 	Values usable for pcf85063 load capacitance are 7pF, 12.5pF
+- nxp,offset: raw hex value of offset register.
+	if not given, driver will keep current register value
 
 Example:
 	pcf85063: rtc@51 {
 		compatible = "nxp,pcf85063";
 		nxp,quartz_load = "12.5pF";
+		nxp,offset = <0x80>;
 		reg = <0x51>;
 	};
diff --git a/drivers/rtc/rtc-pcf85063.c b/drivers/rtc/rtc-pcf85063.c
index fc4d55e777ba..85d51ebd91b1 100644
--- a/drivers/rtc/rtc-pcf85063.c
+++ b/drivers/rtc/rtc-pcf85063.c
@@ -197,12 +197,12 @@ static int pcf85063_probe(struct i2c_client *client,
 {
 	struct rtc_device *rtc;
 	int err;
+	int offset;
 	unsigned char regs[3];
 
 	/* Control & status */
 	regs[PCF85063_REG_CTRL1] = 0x00;
 	regs[PCF85063_REG_CTRL2] = PCF85063_REG_CTRL2_CLKOUT_32KHZ;
-	regs[PCF85063_REG_OFFSET] = PCF85063_REG_OFFSET_MODE;
 
 	dev_dbg(&client->dev, "%s\n", __func__);
 
@@ -223,6 +223,16 @@ static int pcf85063_probe(struct i2c_client *client,
 				     "nxp,quartz_load", "12.5pF") == 0)
 		regs[PCF85063_REG_CTRL1] |= PCF85063_REG_CTRL1_CAP_SEL;
 
+	if (of_property_read_u32(client->dev.of_node, "nxp,offset",
+				 &offset)) {
+		i2c_smbus_read_i2c_block_data(client, PCF85063_REG_OFFSET,
+					      1, &regs[PCF85063_REG_OFFSET]);
+		dev_dbg(&client->dev,
+			"no offset found - keeping current value: 0x%02x\n",
+			regs[PCF85063_REG_OFFSET]);
+	} else
+		regs[PCF85063_REG_OFFSET] = (u8)(offset & 0xFF);
+
 	/* write register's data */
 	err = i2c_smbus_write_i2c_block_data(client, PCF85063_REG_CTRL1,
 					    sizeof(regs), regs);
