From 689e4734040cde9ac0159bb8334c207116f87cde Mon Sep 17 00:00:00 2001
From: Markus Niebel <Markus.Niebel@tq-group.com>
Date: Mon, 10 Sep 2018 11:12:01 +0200
Subject: [PATCH 003/188] sound: soc: add imx-tlv320aic32x4 machine driver

Signed-off-by: Markus Niebel <Markus.Niebel@tq-group.com>
---
 .../bindings/sound/imx-tlv320aic32x4.txt      |  25 +++
 sound/soc/fsl/Kconfig                         |  13 ++
 sound/soc/fsl/Makefile                        |   2 +
 sound/soc/fsl/imx-tlv320aic32x4.c             | 165 ++++++++++++++++++
 4 files changed, 205 insertions(+)
 create mode 100644 Documentation/devicetree/bindings/sound/imx-tlv320aic32x4.txt
 create mode 100644 sound/soc/fsl/imx-tlv320aic32x4.c

diff --git a/Documentation/devicetree/bindings/sound/imx-tlv320aic32x4.txt b/Documentation/devicetree/bindings/sound/imx-tlv320aic32x4.txt
new file mode 100644
index 000000000000..a5574db40afb
--- /dev/null
+++ b/Documentation/devicetree/bindings/sound/imx-tlv320aic32x4.txt
@@ -0,0 +1,25 @@
+Freescale i.MX audio complex with TLV320AIC32x4 codec
+
+Required properties:
+- compatible : "fsl,imx-audio-tlv320aic32x4"
+- model : The user-visible name of this sound complex
+- ssi-controller : The phandle of the i.MX SSI controller
+- audio-codec : The phandle of the tlv320aic32x4 audio codec
+
+- mux-int-port : The internal port of the i.MX audio muxer (AUDMUX)
+- mux-ext-port : The external port of the i.MX audio muxer
+
+Note: The AUDMUX port numbering should start at 1, which is consistent with
+hardware manual.
+
+Example:
+
+sound {
+	compatible = "fsl,imx6-tqma6x-tlv320aic32x4",
+		     "fsl,imx-audio-tlv320aic32x4";
+	model = "imx6-tqma6x-tlv320aic32";
+	ssi-controller = <&ssi1>;
+	audio-codec = <&codec>;
+	mux-int-port = <1>;
+	mux-ext-port = <3>;
+};
diff --git a/sound/soc/fsl/Kconfig b/sound/soc/fsl/Kconfig
index 1dfad9187644..8099cad637e9 100644
--- a/sound/soc/fsl/Kconfig
+++ b/sound/soc/fsl/Kconfig
@@ -567,6 +567,19 @@ config SND_SOC_IMX_PDM_MIC
 	  Say Y if you want to add support for SoC Audio support for i.MX boards
 	  with PDM microphones on SAI.
 
+config SND_SOC_IMX_TLV320AIC32x4
+	tristate "SoC Audio support for i.MX boards with tlv320aic32x4"
+	depends on OF && I2C
+	select SND_SOC_IMX_PCM_DMA
+	select SND_SOC_IMX_AUDMUX
+	select SND_SOC_FSL_SSI
+	select SND_SOC_FSL_UTILS
+	select SND_SOC_TLV320AIC32X4
+	select SND_SOC_TLV320AIC32X4_I2C
+	help
+	  Say Y if you want to add support for SoC audio on an i.MX board with
+	  a tlv320aic32x4 codec.
+
 endif # SND_IMX_SOC
 
 endmenu
diff --git a/sound/soc/fsl/Makefile b/sound/soc/fsl/Makefile
index 0b23c8e74e41..3c210328fed7 100644
--- a/sound/soc/fsl/Makefile
+++ b/sound/soc/fsl/Makefile
@@ -94,6 +94,7 @@ snd-soc-imx-ak5558-objs := imx-ak5558.o
 snd-soc-imx-ak4497-objs := imx-ak4497.o
 snd-soc-imx-micfil-objs := imx-micfil.o
 snd-soc-imx-dsp-objs := imx-dsp.o
+snd-soc-imx-tlv320aic32x4-objs := imx-tlv320aic32x4.o
 
 obj-$(CONFIG_SND_SOC_EUKREA_TLV320) += snd-soc-eukrea-tlv320.o
 obj-$(CONFIG_SND_SOC_PHYCORE_AC97) += snd-soc-phycore-ac97.o
@@ -122,5 +123,6 @@ obj-$(CONFIG_SND_SOC_IMX_AK5558) += snd-soc-imx-ak5558.o
 obj-$(CONFIG_SND_SOC_IMX_CDNHDMI) += snd-soc-imx-cdnhdmi.o
 obj-$(CONFIG_SND_SOC_IMX_HDMI) += snd-soc-imx-hdmi.o
 obj-$(CONFIG_SND_SOC_IMX_DSP) += snd-soc-imx-dsp.o
+obj-$(CONFIG_SND_SOC_IMX_TLV320AIC32x4) += snd-soc-imx-tlv320aic32x4.o
 
 AFLAGS_hdmi_pcm.o := -march=armv7-a -mtune=cortex-a9 -mfpu=neon -mfloat-abi=softfp
diff --git a/sound/soc/fsl/imx-tlv320aic32x4.c b/sound/soc/fsl/imx-tlv320aic32x4.c
new file mode 100644
index 000000000000..978a2666c691
--- /dev/null
+++ b/sound/soc/fsl/imx-tlv320aic32x4.c
@@ -0,0 +1,165 @@
+/*
+ * Copyright 2014 Markus Pargmann <mpa@pengutronix.de>
+ *
+ *  Based on imx-sgtl5000.c
+ *
+ * The code contained herein is licensed under the GNU General Public
+ * License. You may obtain a copy of the GNU General Public License
+ * Version 2 or later at the following locations:
+ *
+ * http://www.opensource.org/licenses/gpl-license.html
+ * http://www.gnu.org/copyleft/gpl.html
+ */
+
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_platform.h>
+#include <linux/i2c.h>
+#include <linux/clk.h>
+#include <sound/soc.h>
+
+#define DAI_NAME_SIZE	32
+
+struct imx_tlv320aic_data {
+	struct snd_soc_dai_link dai;
+	struct snd_soc_card card;
+	char codec_dai_name[DAI_NAME_SIZE];
+	char platform_name[DAI_NAME_SIZE];
+	struct clk *codec_clk;
+	unsigned int clk_frequency;
+};
+
+static int imx_tlv320aic_dai_init(struct snd_soc_pcm_runtime *rtd)
+{
+	struct imx_tlv320aic_data *data = container_of(rtd->card,
+					struct imx_tlv320aic_data, card);
+	struct device *dev = rtd->card->dev;
+	int ret;
+
+	ret = snd_soc_dai_set_sysclk(rtd->codec_dai, 0, data->clk_frequency, 0);
+	if (ret) {
+		dev_err(dev, "could not set codec driver clock params\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+static int imx_tlv320aic_probe(struct platform_device *pdev)
+{
+	struct device_node *ssi_np, *codec_np;
+	struct platform_device *ssi_pdev;
+	struct i2c_client *codec_dev;
+	struct imx_tlv320aic_data *data;
+	int ret = 0;
+
+
+	ssi_np = of_parse_phandle(pdev->dev.of_node, "ssi-controller", 0);
+	codec_np = of_parse_phandle(pdev->dev.of_node, "audio-codec", 0);
+	if (!ssi_np || !codec_np) {
+		dev_err(&pdev->dev, "phandle missing or invalid\n");
+		ret = -EINVAL;
+		goto fail;
+	}
+
+	ssi_pdev = of_find_device_by_node(ssi_np);
+	if (!ssi_pdev) {
+		dev_err(&pdev->dev, "failed to find SSI platform device\n");
+		ret = -EPROBE_DEFER;
+		goto fail;
+	}
+	codec_dev = of_find_i2c_device_by_node(codec_np);
+	if (!codec_dev) {
+		dev_err(&pdev->dev, "failed to find codec platform device\n");
+		return -EPROBE_DEFER;
+	}
+
+	data = devm_kzalloc(&pdev->dev, sizeof(*data), GFP_KERNEL);
+	if (!data) {
+		ret = -ENOMEM;
+		goto fail;
+	}
+
+	data->codec_clk = devm_clk_get(&codec_dev->dev, NULL);
+	if (IS_ERR(data->codec_clk)) {
+		dev_err(&pdev->dev, "Failed to get codec clock\n");
+		goto fail;
+	}
+
+	ret = clk_prepare_enable(data->codec_clk);
+	if (ret) {
+		dev_err(&pdev->dev, "Failed to enable codec clk %d\n", ret);
+		return ret;
+	}
+
+	data->clk_frequency = clk_get_rate(data->codec_clk);
+
+	data->dai.name = "HiFi";
+	data->dai.stream_name = "HiFi";
+	data->dai.codec_dai_name = "tlv320aic32x4-hifi";
+	data->dai.codec_of_node = codec_np;
+	data->dai.cpu_of_node = ssi_np;
+	data->dai.platform_of_node = ssi_np;
+	data->dai.init = &imx_tlv320aic_dai_init;
+	data->dai.dai_fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+			    SND_SOC_DAIFMT_CBM_CFM;
+
+	data->card.dev = &pdev->dev;
+	ret = snd_soc_of_parse_card_name(&data->card, "model");
+	if (ret)
+		goto fail;
+
+	data->card.num_links = 1;
+	data->card.owner = THIS_MODULE;
+	data->card.dai_link = &data->dai;
+
+	ret = snd_soc_register_card(&data->card);
+	if (ret) {
+		dev_err(&pdev->dev, "snd_soc_register_card failed (%d)\n", ret);
+		goto fail;
+	}
+
+	platform_set_drvdata(pdev, data);
+	of_node_put(ssi_np);
+	of_node_put(codec_np);
+
+	return 0;
+
+fail:
+	if (ssi_np)
+		of_node_put(ssi_np);
+	if (codec_np)
+		of_node_put(codec_np);
+
+	return ret;
+}
+
+static int imx_tlv320aic_remove(struct platform_device *pdev)
+{
+	struct imx_tlv320aic_data *data = platform_get_drvdata(pdev);
+
+	snd_soc_unregister_card(&data->card);
+
+	return 0;
+}
+
+static const struct of_device_id imx_tlv320aic_dt_ids[] = {
+	{ .compatible = "fsl,imx-audio-tlv320aic32x4", },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, imx_tlv320aic_dt_ids);
+
+static struct platform_driver imx_tlv320aic_driver = {
+	.driver = {
+		.name = "imx-tlv320aic32x4",
+		.owner = THIS_MODULE,
+		.of_match_table = imx_tlv320aic_dt_ids,
+	},
+	.probe = imx_tlv320aic_probe,
+	.remove = imx_tlv320aic_remove,
+};
+module_platform_driver(imx_tlv320aic_driver);
+
+MODULE_AUTHOR("Markus Pargmann <mpa@pengutronix.de>");
+MODULE_DESCRIPTION("Freescale i.MX with TI TLV320AIC32x4 ASoC machine driver");
+MODULE_LICENSE("GPL v2");
